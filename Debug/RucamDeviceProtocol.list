
RucamDeviceProtocol.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000011c  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800355c  0800355c  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800355c  0800355c  0001355c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003564  08003564  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003564  08003564  00013564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003568  08003568  00013568  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800356c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000078  080035e4  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000134  080035e4  00020134  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009632  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018f8  00000000  00000000  000296da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002afd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006a0  00000000  00000000  0002b720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015842  00000000  00000000  0002bdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009ae9  00000000  00000000  00041602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085372  00000000  00000000  0004b0eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d045d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001eb8  00000000  00000000  000d04b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08003428 	.word	0x08003428

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08003428 	.word	0x08003428

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <calcCrc_dvb_s2>:
#include "crc.h"

uint8_t calcCrc_dvb_s2( uint8_t *buf, uint8_t numBytes )
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b084      	sub	sp, #16
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
 80004e4:	460b      	mov	r3, r1
 80004e6:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i=0; i<numBytes; i++ )
 80004ec:	2300      	movs	r3, #0
 80004ee:	73bb      	strb	r3, [r7, #14]
 80004f0:	e00d      	b.n	800050e <calcCrc_dvb_s2+0x32>
        crc = crc8_calc( crc, *(buf+i), 0xd5 );
 80004f2:	7bbb      	ldrb	r3, [r7, #14]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	7819      	ldrb	r1, [r3, #0]
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	22d5      	movs	r2, #213	; 0xd5
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 f80e 	bl	8000520 <crc8_calc>
 8000504:	4603      	mov	r3, r0
 8000506:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i=0; i<numBytes; i++ )
 8000508:	7bbb      	ldrb	r3, [r7, #14]
 800050a:	3301      	adds	r3, #1
 800050c:	73bb      	strb	r3, [r7, #14]
 800050e:	7bba      	ldrb	r2, [r7, #14]
 8000510:	78fb      	ldrb	r3, [r7, #3]
 8000512:	429a      	cmp	r2, r3
 8000514:	d3ed      	bcc.n	80004f2 <calcCrc_dvb_s2+0x16>

    return crc;
 8000516:	7bfb      	ldrb	r3, [r7, #15]

}
 8000518:	4618      	mov	r0, r3
 800051a:	3710      	adds	r7, #16
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}

08000520 <crc8_calc>:

uint8_t crc8_calc( uint8_t crc, unsigned char a, uint8_t poly )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	4603      	mov	r3, r0
 8000528:	71fb      	strb	r3, [r7, #7]
 800052a:	460b      	mov	r3, r1
 800052c:	71bb      	strb	r3, [r7, #6]
 800052e:	4613      	mov	r3, r2
 8000530:	717b      	strb	r3, [r7, #5]
    crc ^= a;
 8000532:	79fa      	ldrb	r2, [r7, #7]
 8000534:	79bb      	ldrb	r3, [r7, #6]
 8000536:	4053      	eors	r3, r2
 8000538:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii)
 800053a:	2300      	movs	r3, #0
 800053c:	60fb      	str	r3, [r7, #12]
 800053e:	e012      	b.n	8000566 <crc8_calc+0x46>
    {
        if (crc & 0x80)
 8000540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	da08      	bge.n	800055a <crc8_calc+0x3a>
            crc = (crc << 1) ^ poly;
 8000548:	79fb      	ldrb	r3, [r7, #7]
 800054a:	005b      	lsls	r3, r3, #1
 800054c:	b25a      	sxtb	r2, r3
 800054e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000552:	4053      	eors	r3, r2
 8000554:	b25b      	sxtb	r3, r3
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	e002      	b.n	8000560 <crc8_calc+0x40>
        else
            crc = crc << 1;
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	005b      	lsls	r3, r3, #1
 800055e:	71fb      	strb	r3, [r7, #7]
    for (int ii = 0; ii < 8; ++ii)
 8000560:	68fb      	ldr	r3, [r7, #12]
 8000562:	3301      	adds	r3, #1
 8000564:	60fb      	str	r3, [r7, #12]
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b07      	cmp	r3, #7
 800056a:	dde9      	ble.n	8000540 <crc8_calc+0x20>

    }
    return crc;
 800056c:	79fb      	ldrb	r3, [r7, #7]

}
 800056e:	4618      	mov	r0, r3
 8000570:	3714      	adds	r7, #20
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
	...

0800057c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b08a      	sub	sp, #40	; 0x28
 8000580:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000582:	f000 fd13 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000586:	f000 f821 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058a:	f000 f8d1 	bl	8000730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800058e:	f000 f87b 	bl	8000688 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000592:	f000 f8a3 	bl	80006dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  runcamDevice_t rcDevice;
  init_device(&rcDevice, &huart1, 3);
 8000596:	f107 0310 	add.w	r3, r7, #16
 800059a:	2203      	movs	r2, #3
 800059c:	4909      	ldr	r1, [pc, #36]	; (80005c4 <main+0x48>)
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f950 	bl	8000844 <init_device>

  runcamDeviceRecordingTime_t recTimeData = get_remaining_recording_time(&rcDevice);
 80005a4:	1d3b      	adds	r3, r7, #4
 80005a6:	f107 0210 	add.w	r2, r7, #16
 80005aa:	4611      	mov	r1, r2
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 fb5e 	bl	8000c6e <get_remaining_recording_time>
  HAL_UART_Transmit(&huart2, recTimeData.time_str, recTimeData.strLen, 10);
 80005b2:	68b9      	ldr	r1, [r7, #8]
 80005b4:	7b3b      	ldrb	r3, [r7, #12]
 80005b6:	b29a      	uxth	r2, r3
 80005b8:	230a      	movs	r3, #10
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x4c>)
 80005bc:	f001 fd4f 	bl	800205e <HAL_UART_Transmit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <main+0x44>
 80005c2:	bf00      	nop
 80005c4:	20000094 	.word	0x20000094
 80005c8:	200000d8 	.word	0x200000d8

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f002 fdde 	bl	800319c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b22      	ldr	r3, [pc, #136]	; (8000680 <SystemClock_Config+0xb4>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a21      	ldr	r2, [pc, #132]	; (8000680 <SystemClock_Config+0xb4>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <SystemClock_Config+0xb4>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <SystemClock_Config+0xb8>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a1b      	ldr	r2, [pc, #108]	; (8000684 <SystemClock_Config+0xb8>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b19      	ldr	r3, [pc, #100]	; (8000684 <SystemClock_Config+0xb8>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000634:	2300      	movs	r3, #0
 8000636:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0320 	add.w	r3, r7, #32
 800063c:	4618      	mov	r0, r3
 800063e:	f001 f869 	bl	8001714 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000648:	f000 f8d2 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000650:	2300      	movs	r3, #0
 8000652:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f001 facc 	bl	8001c04 <HAL_RCC_ClockConfig>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000672:	f000 f8bd 	bl	80007f0 <Error_Handler>
  }
}
 8000676:	bf00      	nop
 8000678:	3750      	adds	r7, #80	; 0x50
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40023800 	.word	0x40023800
 8000684:	40007000 	.word	0x40007000

08000688 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800068c:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 800068e:	4a12      	ldr	r2, [pc, #72]	; (80006d8 <MX_USART1_UART_Init+0x50>)
 8000690:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000692:	4b10      	ldr	r3, [pc, #64]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 8000694:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000698:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800069a:	4b0e      	ldr	r3, [pc, #56]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006ac:	4b09      	ldr	r3, [pc, #36]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006ae:	220c      	movs	r2, #12
 80006b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006b2:	4b08      	ldr	r3, [pc, #32]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b8:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006be:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_USART1_UART_Init+0x4c>)
 80006c0:	f001 fc80 	bl	8001fc4 <HAL_UART_Init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006ca:	f000 f891 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000094 	.word	0x20000094
 80006d8:	40011000 	.word	0x40011000

080006dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e0:	4b11      	ldr	r3, [pc, #68]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e2:	4a12      	ldr	r2, [pc, #72]	; (800072c <MX_USART2_UART_Init+0x50>)
 80006e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006e6:	4b10      	ldr	r3, [pc, #64]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ee:	4b0e      	ldr	r3, [pc, #56]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000702:	220c      	movs	r2, #12
 8000704:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000708:	2200      	movs	r2, #0
 800070a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 800070e:	2200      	movs	r2, #0
 8000710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000712:	4805      	ldr	r0, [pc, #20]	; (8000728 <MX_USART2_UART_Init+0x4c>)
 8000714:	f001 fc56 	bl	8001fc4 <HAL_UART_Init>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800071e:	f000 f867 	bl	80007f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000722:	bf00      	nop
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	200000d8 	.word	0x200000d8
 800072c:	40004400 	.word	0x40004400

08000730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b08a      	sub	sp, #40	; 0x28
 8000734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000736:	f107 0314 	add.w	r3, r7, #20
 800073a:	2200      	movs	r2, #0
 800073c:	601a      	str	r2, [r3, #0]
 800073e:	605a      	str	r2, [r3, #4]
 8000740:	609a      	str	r2, [r3, #8]
 8000742:	60da      	str	r2, [r3, #12]
 8000744:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
 800074a:	4b27      	ldr	r3, [pc, #156]	; (80007e8 <MX_GPIO_Init+0xb8>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a26      	ldr	r2, [pc, #152]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000750:	f043 0304 	orr.w	r3, r3, #4
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0304 	and.w	r3, r3, #4
 800075e:	613b      	str	r3, [r7, #16]
 8000760:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	60fb      	str	r3, [r7, #12]
 8000766:	4b20      	ldr	r3, [pc, #128]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a1f      	ldr	r2, [pc, #124]	; (80007e8 <MX_GPIO_Init+0xb8>)
 800076c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b1d      	ldr	r3, [pc, #116]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077a:	60fb      	str	r3, [r7, #12]
 800077c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60bb      	str	r3, [r7, #8]
 8000782:	4b19      	ldr	r3, [pc, #100]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a18      	ldr	r2, [pc, #96]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b16      	ldr	r3, [pc, #88]	; (80007e8 <MX_GPIO_Init+0xb8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60bb      	str	r3, [r7, #8]
 8000798:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a11      	ldr	r2, [pc, #68]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <MX_GPIO_Init+0xb8>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007bc:	480b      	ldr	r0, [pc, #44]	; (80007ec <MX_GPIO_Init+0xbc>)
 80007be:	f000 ff8f 	bl	80016e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007d4:	f107 0314 	add.w	r3, r7, #20
 80007d8:	4619      	mov	r1, r3
 80007da:	4804      	ldr	r0, [pc, #16]	; (80007ec <MX_GPIO_Init+0xbc>)
 80007dc:	f000 fdfc 	bl	80013d8 <HAL_GPIO_Init>

}
 80007e0:	bf00      	nop
 80007e2:	3728      	adds	r7, #40	; 0x28
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40020800 	.word	0x40020800

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <runcamDeviceGetRespLen>:
    { RCDEVICE_PROTOCOL_COMMAND_5KEY_SIMULATION_RELEASE,    2},
    { RCDEVICE_PROTOCOL_COMMAND_5KEY_CONNECTION,            3},
};

static uint8_t runcamDeviceGetRespLen(uint8_t command)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	4603      	mov	r3, r0
 8000804:	71fb      	strb	r3, [r7, #7]
    for (unsigned int i = 0; i < ARRAYLEN(expectedResponsesLength); i++) {
 8000806:	2300      	movs	r3, #0
 8000808:	60fb      	str	r3, [r7, #12]
 800080a:	e00f      	b.n	800082c <runcamDeviceGetRespLen+0x30>
        if (expectedResponsesLength[i].command == command) {
 800080c:	4a0c      	ldr	r2, [pc, #48]	; (8000840 <runcamDeviceGetRespLen+0x44>)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000814:	79fa      	ldrb	r2, [r7, #7]
 8000816:	429a      	cmp	r2, r3
 8000818:	d105      	bne.n	8000826 <runcamDeviceGetRespLen+0x2a>
            return expectedResponsesLength[i].reponseLength;
 800081a:	4a09      	ldr	r2, [pc, #36]	; (8000840 <runcamDeviceGetRespLen+0x44>)
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	4413      	add	r3, r2
 8000822:	785b      	ldrb	r3, [r3, #1]
 8000824:	e006      	b.n	8000834 <runcamDeviceGetRespLen+0x38>
    for (unsigned int i = 0; i < ARRAYLEN(expectedResponsesLength); i++) {
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	3301      	adds	r3, #1
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	2b03      	cmp	r3, #3
 8000830:	d9ec      	bls.n	800080c <runcamDeviceGetRespLen+0x10>
        }
    }
    return 0;
 8000832:	2300      	movs	r3, #0
}
 8000834:	4618      	mov	r0, r3
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	20000000 	.word	0x20000000

08000844 <init_device>:

void init_device(runcamDevice_t* device, UART_HandleTypeDef* uart, uint8_t recieveRetries) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	4613      	mov	r3, r2
 8000850:	71fb      	strb	r3, [r7, #7]
	device->uart = uart;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	68ba      	ldr	r2, [r7, #8]
 8000856:	605a      	str	r2, [r3, #4]
	device->recieveRetries = recieveRetries;
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	79fa      	ldrb	r2, [r7, #7]
 800085c:	721a      	strb	r2, [r3, #8]
//	device->currentRecordingTime = ; TODO
	get_device_info(device);
 800085e:	68f8      	ldr	r0, [r7, #12]
 8000860:	f000 f9c5 	bl	8000bee <get_device_info>
}
 8000864:	bf00      	nop
 8000866:	3710      	adds	r7, #16
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <is_correct_crc>:

bool is_correct_crc(uint8_t* buf, uint8_t bufLength)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
 8000874:	460b      	mov	r3, r1
 8000876:	70fb      	strb	r3, [r7, #3]
	uint8_t recieved_crc = calcCrc_dvb_s2(buf, bufLength - 1);
 8000878:	78fb      	ldrb	r3, [r7, #3]
 800087a:	3b01      	subs	r3, #1
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f7ff fe2b 	bl	80004dc <calcCrc_dvb_s2>
 8000886:	4603      	mov	r3, r0
 8000888:	73fb      	strb	r3, [r7, #15]

	return recieved_crc == buf[bufLength-1];
 800088a:	78fb      	ldrb	r3, [r7, #3]
 800088c:	3b01      	subs	r3, #1
 800088e:	687a      	ldr	r2, [r7, #4]
 8000890:	4413      	add	r3, r2
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	7bfa      	ldrb	r2, [r7, #15]
 8000896:	429a      	cmp	r2, r3
 8000898:	bf0c      	ite	eq
 800089a:	2301      	moveq	r3, #1
 800089c:	2300      	movne	r3, #0
 800089e:	b2db      	uxtb	r3, r3
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}

080008a8 <send_command>:

void send_command(runcamDevice_t* device, uint8_t commandID, uint8_t *data, uint8_t dataLen)
{
 80008a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80008ac:	b089      	sub	sp, #36	; 0x24
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	60f8      	str	r0, [r7, #12]
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	461a      	mov	r2, r3
 80008b6:	460b      	mov	r3, r1
 80008b8:	72fb      	strb	r3, [r7, #11]
 80008ba:	4613      	mov	r3, r2
 80008bc:	72bb      	strb	r3, [r7, #10]
 80008be:	466b      	mov	r3, sp
 80008c0:	461e      	mov	r6, r3
	uint8_t commandLen = 2+dataLen+1;
 80008c2:	7abb      	ldrb	r3, [r7, #10]
 80008c4:	3303      	adds	r3, #3
 80008c6:	76fb      	strb	r3, [r7, #27]
	uint8_t txBuf[commandLen];
 80008c8:	7ef9      	ldrb	r1, [r7, #27]
 80008ca:	460b      	mov	r3, r1
 80008cc:	3b01      	subs	r3, #1
 80008ce:	617b      	str	r3, [r7, #20]
 80008d0:	b2cb      	uxtb	r3, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	4698      	mov	r8, r3
 80008d6:	4691      	mov	r9, r2
 80008d8:	f04f 0200 	mov.w	r2, #0
 80008dc:	f04f 0300 	mov.w	r3, #0
 80008e0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80008e4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80008e8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80008ec:	b2cb      	uxtb	r3, r1
 80008ee:	2200      	movs	r2, #0
 80008f0:	461c      	mov	r4, r3
 80008f2:	4615      	mov	r5, r2
 80008f4:	f04f 0200 	mov.w	r2, #0
 80008f8:	f04f 0300 	mov.w	r3, #0
 80008fc:	00eb      	lsls	r3, r5, #3
 80008fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000902:	00e2      	lsls	r2, r4, #3
 8000904:	460b      	mov	r3, r1
 8000906:	3307      	adds	r3, #7
 8000908:	08db      	lsrs	r3, r3, #3
 800090a:	00db      	lsls	r3, r3, #3
 800090c:	ebad 0d03 	sub.w	sp, sp, r3
 8000910:	466b      	mov	r3, sp
 8000912:	3300      	adds	r3, #0
 8000914:	613b      	str	r3, [r7, #16]

	txBuf[0] = RCDEVICE_PROTOCOL_HEADER;
 8000916:	693b      	ldr	r3, [r7, #16]
 8000918:	22cc      	movs	r2, #204	; 0xcc
 800091a:	701a      	strb	r2, [r3, #0]
	txBuf[1] = commandID;
 800091c:	693b      	ldr	r3, [r7, #16]
 800091e:	7afa      	ldrb	r2, [r7, #11]
 8000920:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < dataLen; i ++) {
 8000922:	2300      	movs	r3, #0
 8000924:	61fb      	str	r3, [r7, #28]
 8000926:	e00a      	b.n	800093e <send_command+0x96>
		txBuf[2+i] = data[i];
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	687a      	ldr	r2, [r7, #4]
 800092c:	441a      	add	r2, r3
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	3302      	adds	r3, #2
 8000932:	7811      	ldrb	r1, [r2, #0]
 8000934:	693a      	ldr	r2, [r7, #16]
 8000936:	54d1      	strb	r1, [r2, r3]
	for (int i = 0; i < dataLen; i ++) {
 8000938:	69fb      	ldr	r3, [r7, #28]
 800093a:	3301      	adds	r3, #1
 800093c:	61fb      	str	r3, [r7, #28]
 800093e:	7abb      	ldrb	r3, [r7, #10]
 8000940:	69fa      	ldr	r2, [r7, #28]
 8000942:	429a      	cmp	r2, r3
 8000944:	dbf0      	blt.n	8000928 <send_command+0x80>
	}
	txBuf[commandLen-1] = calcCrc_dvb_s2(txBuf, commandLen - 1);
 8000946:	7efb      	ldrb	r3, [r7, #27]
 8000948:	3b01      	subs	r3, #1
 800094a:	b2da      	uxtb	r2, r3
 800094c:	7efb      	ldrb	r3, [r7, #27]
 800094e:	1e5c      	subs	r4, r3, #1
 8000950:	4611      	mov	r1, r2
 8000952:	6938      	ldr	r0, [r7, #16]
 8000954:	f7ff fdc2 	bl	80004dc <calcCrc_dvb_s2>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	693b      	ldr	r3, [r7, #16]
 800095e:	551a      	strb	r2, [r3, r4]

	HAL_UART_Transmit(device->uart, txBuf, commandLen, 10);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	6858      	ldr	r0, [r3, #4]
 8000964:	7efb      	ldrb	r3, [r7, #27]
 8000966:	b29a      	uxth	r2, r3
 8000968:	230a      	movs	r3, #10
 800096a:	6939      	ldr	r1, [r7, #16]
 800096c:	f001 fb77 	bl	800205e <HAL_UART_Transmit>
 8000970:	46b5      	mov	sp, r6
}
 8000972:	bf00      	nop
 8000974:	3724      	adds	r7, #36	; 0x24
 8000976:	46bd      	mov	sp, r7
 8000978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800097c <recieve_data_fixed_len>:

void recieve_data_fixed_len(runcamDevice_t* device, runcamDeviceRecieveData_t* data, uint8_t packetLen)
{
 800097c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000980:	b089      	sub	sp, #36	; 0x24
 8000982:	af00      	add	r7, sp, #0
 8000984:	60f8      	str	r0, [r7, #12]
 8000986:	60b9      	str	r1, [r7, #8]
 8000988:	4613      	mov	r3, r2
 800098a:	71fb      	strb	r3, [r7, #7]
 800098c:	466b      	mov	r3, sp
 800098e:	461e      	mov	r6, r3
	uint8_t rxBuf[packetLen];
 8000990:	79f9      	ldrb	r1, [r7, #7]
 8000992:	460b      	mov	r3, r1
 8000994:	3b01      	subs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
 8000998:	b2cb      	uxtb	r3, r1
 800099a:	2200      	movs	r2, #0
 800099c:	4698      	mov	r8, r3
 800099e:	4691      	mov	r9, r2
 80009a0:	f04f 0200 	mov.w	r2, #0
 80009a4:	f04f 0300 	mov.w	r3, #0
 80009a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80009ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80009b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80009b4:	b2cb      	uxtb	r3, r1
 80009b6:	2200      	movs	r2, #0
 80009b8:	461c      	mov	r4, r3
 80009ba:	4615      	mov	r5, r2
 80009bc:	f04f 0200 	mov.w	r2, #0
 80009c0:	f04f 0300 	mov.w	r3, #0
 80009c4:	00eb      	lsls	r3, r5, #3
 80009c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80009ca:	00e2      	lsls	r2, r4, #3
 80009cc:	460b      	mov	r3, r1
 80009ce:	3307      	adds	r3, #7
 80009d0:	08db      	lsrs	r3, r3, #3
 80009d2:	00db      	lsls	r3, r3, #3
 80009d4:	ebad 0d03 	sub.w	sp, sp, r3
 80009d8:	466b      	mov	r3, sp
 80009da:	3300      	adds	r3, #0
 80009dc:	617b      	str	r3, [r7, #20]

	HAL_UART_Receive(device->uart, rxBuf, packetLen, 10); // should really be using dma here
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	6858      	ldr	r0, [r3, #4]
 80009e2:	79fb      	ldrb	r3, [r7, #7]
 80009e4:	b29a      	uxth	r2, r3
 80009e6:	230a      	movs	r3, #10
 80009e8:	6979      	ldr	r1, [r7, #20]
 80009ea:	f001 fbca 	bl	8002182 <HAL_UART_Receive>

	data->correct_crc = is_correct_crc(rxBuf, packetLen);
 80009ee:	79fb      	ldrb	r3, [r7, #7]
 80009f0:	4619      	mov	r1, r3
 80009f2:	6978      	ldr	r0, [r7, #20]
 80009f4:	f7ff ff3a 	bl	800086c <is_correct_crc>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	731a      	strb	r2, [r3, #12]

	if (!data->correct_crc) return;
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	7b1b      	ldrb	r3, [r3, #12]
 8000a04:	f083 0301 	eor.w	r3, r3, #1
 8000a08:	b2db      	uxtb	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <recieve_data_fixed_len+0x96>
 8000a0e:	46b5      	mov	sp, r6
 8000a10:	e02d      	b.n	8000a6e <recieve_data_fixed_len+0xf2>

	data->header = rxBuf[0];
 8000a12:	697b      	ldr	r3, [r7, #20]
 8000a14:	781a      	ldrb	r2, [r3, #0]
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	701a      	strb	r2, [r3, #0]
	data->dataLen = packetLen - 2;
 8000a1a:	79fb      	ldrb	r3, [r7, #7]
 8000a1c:	3b02      	subs	r3, #2
 8000a1e:	b2da      	uxtb	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	721a      	strb	r2, [r3, #8]

	data->data = (uint8_t *)malloc(data->dataLen);
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	7a1b      	ldrb	r3, [r3, #8]
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 fbaf 	bl	800318c <malloc>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	605a      	str	r2, [r3, #4]
	for(int i = 0; i < data->dataLen; i ++){
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
 8000a3a:	e00b      	b.n	8000a54 <recieve_data_fixed_len+0xd8>
		data->data[i] = rxBuf[i + 1];
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	1c5a      	adds	r2, r3, #1
 8000a40:	68bb      	ldr	r3, [r7, #8]
 8000a42:	6859      	ldr	r1, [r3, #4]
 8000a44:	69fb      	ldr	r3, [r7, #28]
 8000a46:	440b      	add	r3, r1
 8000a48:	6979      	ldr	r1, [r7, #20]
 8000a4a:	5c8a      	ldrb	r2, [r1, r2]
 8000a4c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < data->dataLen; i ++){
 8000a4e:	69fb      	ldr	r3, [r7, #28]
 8000a50:	3301      	adds	r3, #1
 8000a52:	61fb      	str	r3, [r7, #28]
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	7a1b      	ldrb	r3, [r3, #8]
 8000a58:	461a      	mov	r2, r3
 8000a5a:	69fb      	ldr	r3, [r7, #28]
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	dbed      	blt.n	8000a3c <recieve_data_fixed_len+0xc0>
	}

	data->crc = rxBuf[packetLen - 1];
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	3b01      	subs	r3, #1
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	5cd2      	ldrb	r2, [r2, r3]
 8000a68:	68bb      	ldr	r3, [r7, #8]
 8000a6a:	725a      	strb	r2, [r3, #9]
 8000a6c:	46b5      	mov	sp, r6
}
 8000a6e:	3724      	adds	r7, #36	; 0x24
 8000a70:	46bd      	mov	sp, r7
 8000a72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000a76 <recieve_data_unkown_len>:

void recieve_data_unkown_len(runcamDevice_t* device, runcamDeviceRecieveData_t* data)
{
 8000a76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000a7a:	b087      	sub	sp, #28
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
 8000a80:	6039      	str	r1, [r7, #0]
 8000a82:	466b      	mov	r3, sp
 8000a84:	461e      	mov	r6, r3
	uint8_t rxBuf;
	HAL_UART_Receive(device->uart, &rxBuf, 1, 10);
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	6858      	ldr	r0, [r3, #4]
 8000a8a:	f107 010b 	add.w	r1, r7, #11
 8000a8e:	230a      	movs	r3, #10
 8000a90:	2201      	movs	r2, #1
 8000a92:	f001 fb76 	bl	8002182 <HAL_UART_Receive>
	data->header = rxBuf;
 8000a96:	7afa      	ldrb	r2, [r7, #11]
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive(device->uart, &rxBuf, 1, 1);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6858      	ldr	r0, [r3, #4]
 8000aa0:	f107 010b 	add.w	r1, r7, #11
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f001 fb6b 	bl	8002182 <HAL_UART_Receive>
	data->remaining_chunks = rxBuf;
 8000aac:	7afa      	ldrb	r2, [r7, #11]
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	729a      	strb	r2, [r3, #10]
	HAL_UART_Receive(device->uart, &rxBuf, 1, 1);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	6858      	ldr	r0, [r3, #4]
 8000ab6:	f107 010b 	add.w	r1, r7, #11
 8000aba:	2301      	movs	r3, #1
 8000abc:	2201      	movs	r2, #1
 8000abe:	f001 fb60 	bl	8002182 <HAL_UART_Receive>
	data->dataLen = rxBuf - 1;
 8000ac2:	7afb      	ldrb	r3, [r7, #11]
 8000ac4:	3b01      	subs	r3, #1
 8000ac6:	b2da      	uxtb	r2, r3
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	721a      	strb	r2, [r3, #8]
	HAL_UART_Receive(device->uart, &rxBuf, 1, 1);
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	6858      	ldr	r0, [r3, #4]
 8000ad0:	f107 010b 	add.w	r1, r7, #11
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f001 fb53 	bl	8002182 <HAL_UART_Receive>
	data->setting_type = rxBuf;
 8000adc:	7afa      	ldrb	r2, [r7, #11]
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	72da      	strb	r2, [r3, #11]

	data->data = (uint8_t *) malloc(data->dataLen);
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	7a1b      	ldrb	r3, [r3, #8]
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fb50 	bl	800318c <malloc>
 8000aec:	4603      	mov	r3, r0
 8000aee:	461a      	mov	r2, r3
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	605a      	str	r2, [r3, #4]
	HAL_UART_Receive(device->uart, data->data, data->dataLen, 10);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6858      	ldr	r0, [r3, #4]
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	6859      	ldr	r1, [r3, #4]
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	7a1b      	ldrb	r3, [r3, #8]
 8000b00:	b29a      	uxth	r2, r3
 8000b02:	230a      	movs	r3, #10
 8000b04:	f001 fb3d 	bl	8002182 <HAL_UART_Receive>

	HAL_UART_Receive(device->uart, &rxBuf, 1, 1);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	6858      	ldr	r0, [r3, #4]
 8000b0c:	f107 010b 	add.w	r1, r7, #11
 8000b10:	2301      	movs	r3, #1
 8000b12:	2201      	movs	r2, #1
 8000b14:	f001 fb35 	bl	8002182 <HAL_UART_Receive>
	data->crc = rxBuf;
 8000b18:	7afa      	ldrb	r2, [r7, #11]
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	725a      	strb	r2, [r3, #9]

	uint8_t rxBufArr[4 + data->dataLen + 1];
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	7a1b      	ldrb	r3, [r3, #8]
 8000b22:	1d59      	adds	r1, r3, #5
 8000b24:	1e4b      	subs	r3, r1, #1
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	460a      	mov	r2, r1
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	4690      	mov	r8, r2
 8000b2e:	4699      	mov	r9, r3
 8000b30:	f04f 0200 	mov.w	r2, #0
 8000b34:	f04f 0300 	mov.w	r3, #0
 8000b38:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b3c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b40:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b44:	460a      	mov	r2, r1
 8000b46:	2300      	movs	r3, #0
 8000b48:	4614      	mov	r4, r2
 8000b4a:	461d      	mov	r5, r3
 8000b4c:	f04f 0200 	mov.w	r2, #0
 8000b50:	f04f 0300 	mov.w	r3, #0
 8000b54:	00eb      	lsls	r3, r5, #3
 8000b56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000b5a:	00e2      	lsls	r2, r4, #3
 8000b5c:	460b      	mov	r3, r1
 8000b5e:	3307      	adds	r3, #7
 8000b60:	08db      	lsrs	r3, r3, #3
 8000b62:	00db      	lsls	r3, r3, #3
 8000b64:	ebad 0d03 	sub.w	sp, sp, r3
 8000b68:	466b      	mov	r3, sp
 8000b6a:	3300      	adds	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
	rxBufArr[0] = data->header;
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	781a      	ldrb	r2, [r3, #0]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	701a      	strb	r2, [r3, #0]
	rxBufArr[1] = data->remaining_chunks;
 8000b76:	683b      	ldr	r3, [r7, #0]
 8000b78:	7a9a      	ldrb	r2, [r3, #10]
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	705a      	strb	r2, [r3, #1]
	rxBufArr[2] = data->dataLen+1;
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	7a1b      	ldrb	r3, [r3, #8]
 8000b82:	3301      	adds	r3, #1
 8000b84:	b2da      	uxtb	r2, r3
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	709a      	strb	r2, [r3, #2]
	rxBufArr[3] = data->setting_type;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	7ada      	ldrb	r2, [r3, #11]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	70da      	strb	r2, [r3, #3]

	for(int i = 0; i<data->dataLen; i++){
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
 8000b96:	e00b      	b.n	8000bb0 <recieve_data_unkown_len+0x13a>
		rxBufArr[4+i] = data->data[i];
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685a      	ldr	r2, [r3, #4]
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	441a      	add	r2, r3
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3304      	adds	r3, #4
 8000ba4:	7811      	ldrb	r1, [r2, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	54d1      	strb	r1, [r2, r3]
	for(int i = 0; i<data->dataLen; i++){
 8000baa:	697b      	ldr	r3, [r7, #20]
 8000bac:	3301      	adds	r3, #1
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	683b      	ldr	r3, [r7, #0]
 8000bb2:	7a1b      	ldrb	r3, [r3, #8]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	697b      	ldr	r3, [r7, #20]
 8000bb8:	4293      	cmp	r3, r2
 8000bba:	dbed      	blt.n	8000b98 <recieve_data_unkown_len+0x122>
	}

	rxBufArr[4 + data->dataLen] = data->crc;
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	7a1b      	ldrb	r3, [r3, #8]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	683a      	ldr	r2, [r7, #0]
 8000bc4:	7a51      	ldrb	r1, [r2, #9]
 8000bc6:	68fa      	ldr	r2, [r7, #12]
 8000bc8:	54d1      	strb	r1, [r2, r3]

	data->correct_crc = is_correct_crc(rxBufArr, 4 + data->dataLen + 1);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	7a1b      	ldrb	r3, [r3, #8]
 8000bce:	3305      	adds	r3, #5
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fe49 	bl	800086c <is_correct_crc>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	461a      	mov	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	731a      	strb	r2, [r3, #12]
 8000be2:	46b5      	mov	sp, r6
}
 8000be4:	bf00      	nop
 8000be6:	371c      	adds	r7, #28
 8000be8:	46bd      	mov	sp, r7
 8000bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000bee <get_device_info>:

void get_device_info(runcamDevice_t* device)
{
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b088      	sub	sp, #32
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	6078      	str	r0, [r7, #4]
	runcamDeviceRecieveData_t infoData;
	uint8_t responseLength = runcamDeviceGetRespLen(RCDEVICE_PROTOCOL_COMMAND_GET_DEVICE_INFO);
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	f7ff fe00 	bl	80007fc <runcamDeviceGetRespLen>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	76fb      	strb	r3, [r7, #27]

	for (int i = 0; i < device->recieveRetries; i ++){
 8000c00:	2300      	movs	r3, #0
 8000c02:	61fb      	str	r3, [r7, #28]
 8000c04:	e012      	b.n	8000c2c <get_device_info+0x3e>
		send_command(device, RCDEVICE_PROTOCOL_COMMAND_GET_DEVICE_INFO, NULL, 0);
 8000c06:	2300      	movs	r3, #0
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	6878      	ldr	r0, [r7, #4]
 8000c0e:	f7ff fe4b 	bl	80008a8 <send_command>

		recieve_data_fixed_len(device, &infoData, responseLength);
 8000c12:	7efa      	ldrb	r2, [r7, #27]
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	6878      	ldr	r0, [r7, #4]
 8000c1c:	f7ff feae 	bl	800097c <recieve_data_fixed_len>

		if (infoData.correct_crc) break;
 8000c20:	7d3b      	ldrb	r3, [r7, #20]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d109      	bne.n	8000c3a <get_device_info+0x4c>
	for (int i = 0; i < device->recieveRetries; i ++){
 8000c26:	69fb      	ldr	r3, [r7, #28]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	61fb      	str	r3, [r7, #28]
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7a1b      	ldrb	r3, [r3, #8]
 8000c30:	461a      	mov	r2, r3
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	dbe6      	blt.n	8000c06 <get_device_info+0x18>
 8000c38:	e000      	b.n	8000c3c <get_device_info+0x4e>
		if (infoData.correct_crc) break;
 8000c3a:	bf00      	nop
	}

	if (infoData.correct_crc) {
 8000c3c:	7d3b      	ldrb	r3, [r7, #20]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d011      	beq.n	8000c66 <get_device_info+0x78>
		device->info.protocolVersion = infoData.data[0];
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	781a      	ldrb	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	701a      	strb	r2, [r3, #0]
		device->info.features = infoData.data[1] | (infoData.data[2] << 8);
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	b21a      	sxth	r2, r3
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	3302      	adds	r3, #2
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	021b      	lsls	r3, r3, #8
 8000c5a:	b21b      	sxth	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b21b      	sxth	r3, r3
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	805a      	strh	r2, [r3, #2]
	}
}
 8000c66:	bf00      	nop
 8000c68:	3720      	adds	r7, #32
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <get_remaining_recording_time>:

runcamDeviceRecordingTime_t get_remaining_recording_time(runcamDevice_t* device)
{
 8000c6e:	b590      	push	{r4, r7, lr}
 8000c70:	b08d      	sub	sp, #52	; 0x34
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
 8000c76:	6039      	str	r1, [r7, #0]
	runcamDeviceRecieveData_t recTimeData;

	uint8_t data[] = {0x04, 0x00};
 8000c78:	2304      	movs	r3, #4
 8000c7a:	833b      	strh	r3, [r7, #24]
	for (int i = 0; i < device->recieveRetries; i ++){
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000c80:	e013      	b.n	8000caa <get_remaining_recording_time+0x3c>
		send_command(device, RCDEVICE_PROTOCOL_COMMAND_READ_SETTING_DETAIL, data, ARRAYLEN(data));
 8000c82:	f107 0218 	add.w	r2, r7, #24
 8000c86:	2302      	movs	r3, #2
 8000c88:	2111      	movs	r1, #17
 8000c8a:	6838      	ldr	r0, [r7, #0]
 8000c8c:	f7ff fe0c 	bl	80008a8 <send_command>

		recieve_data_unkown_len(device, &recTimeData);
 8000c90:	f107 031c 	add.w	r3, r7, #28
 8000c94:	4619      	mov	r1, r3
 8000c96:	6838      	ldr	r0, [r7, #0]
 8000c98:	f7ff feed 	bl	8000a76 <recieve_data_unkown_len>

		if (recTimeData.correct_crc) break;
 8000c9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d109      	bne.n	8000cb8 <get_remaining_recording_time+0x4a>
	for (int i = 0; i < device->recieveRetries; i ++){
 8000ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	7a1b      	ldrb	r3, [r3, #8]
 8000cae:	461a      	mov	r2, r3
 8000cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	dbe5      	blt.n	8000c82 <get_remaining_recording_time+0x14>
 8000cb6:	e000      	b.n	8000cba <get_remaining_recording_time+0x4c>
		if (recTimeData.correct_crc) break;
 8000cb8:	bf00      	nop
	}

	runcamDeviceRecordingTime_t remaining_time;

	if (recTimeData.correct_crc){
 8000cba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d013      	beq.n	8000cea <get_remaining_recording_time+0x7c>
		remaining_time.time_str = (char*)recTimeData.data;
 8000cc2:	6a3b      	ldr	r3, [r7, #32]
 8000cc4:	613b      	str	r3, [r7, #16]
		remaining_time.strLen = recTimeData.dataLen;
 8000cc6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000cca:	753b      	strb	r3, [r7, #20]
		remaining_time.time_int = atoi(remaining_time.time_str);
 8000ccc:	693b      	ldr	r3, [r7, #16]
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f002 fa2e 	bl	8003130 <atoi>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60fb      	str	r3, [r7, #12]
		return remaining_time;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	461c      	mov	r4, r3
 8000cdc:	f107 030c 	add.w	r3, r7, #12
 8000ce0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000ce4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8000ce8:	e007      	b.n	8000cfa <get_remaining_recording_time+0x8c>
	}
	return remaining_time;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	461c      	mov	r4, r3
 8000cee:	f107 030c 	add.w	r3, r7, #12
 8000cf2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8000cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8000cfa:	6878      	ldr	r0, [r7, #4]
 8000cfc:	3734      	adds	r7, #52	; 0x34
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd90      	pop	{r4, r7, pc}
	...

08000d04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a0f      	ldr	r2, [pc, #60]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	4a08      	ldr	r2, [pc, #32]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d34:	6413      	str	r3, [r2, #64]	; 0x40
 8000d36:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <HAL_MspInit+0x4c>)
 8000d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a36      	ldr	r2, [pc, #216]	; (8000e4c <HAL_UART_MspInit+0xf8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d134      	bne.n	8000de0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4b35      	ldr	r3, [pc, #212]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a34      	ldr	r2, [pc, #208]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000d80:	f043 0310 	orr.w	r3, r3, #16
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b32      	ldr	r3, [pc, #200]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f003 0310 	and.w	r3, r3, #16
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b2e      	ldr	r3, [pc, #184]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a2d      	ldr	r2, [pc, #180]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000d9c:	f043 0302 	orr.w	r3, r3, #2
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b2b      	ldr	r3, [pc, #172]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0302 	and.w	r3, r3, #2
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000dae:	23c0      	movs	r3, #192	; 0xc0
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	4822      	ldr	r0, [pc, #136]	; (8000e54 <HAL_UART_MspInit+0x100>)
 8000dca:	f000 fb05 	bl	80013d8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	2025      	movs	r0, #37	; 0x25
 8000dd4:	f000 fa37 	bl	8001246 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dd8:	2025      	movs	r0, #37	; 0x25
 8000dda:	f000 fa50 	bl	800127e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dde:	e030      	b.n	8000e42 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a1c      	ldr	r2, [pc, #112]	; (8000e58 <HAL_UART_MspInit+0x104>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d12b      	bne.n	8000e42 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	613b      	str	r3, [r7, #16]
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a17      	ldr	r2, [pc, #92]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e02:	613b      	str	r3, [r7, #16]
 8000e04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a10      	ldr	r2, [pc, #64]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b0e      	ldr	r3, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0xfc>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0301 	and.w	r3, r3, #1
 8000e1e:	60fb      	str	r3, [r7, #12]
 8000e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e22:	230c      	movs	r3, #12
 8000e24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e26:	2302      	movs	r3, #2
 8000e28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e32:	2307      	movs	r3, #7
 8000e34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 031c 	add.w	r3, r7, #28
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4807      	ldr	r0, [pc, #28]	; (8000e5c <HAL_UART_MspInit+0x108>)
 8000e3e:	f000 facb 	bl	80013d8 <HAL_GPIO_Init>
}
 8000e42:	bf00      	nop
 8000e44:	3730      	adds	r7, #48	; 0x30
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40011000 	.word	0x40011000
 8000e50:	40023800 	.word	0x40023800
 8000e54:	40020400 	.word	0x40020400
 8000e58:	40004400 	.word	0x40004400
 8000e5c:	40020000 	.word	0x40020000

08000e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e60:	b480      	push	{r7}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e64:	e7fe      	b.n	8000e64 <NMI_Handler+0x4>

08000e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e66:	b480      	push	{r7}
 8000e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e6a:	e7fe      	b.n	8000e6a <HardFault_Handler+0x4>

08000e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e70:	e7fe      	b.n	8000e70 <MemManage_Handler+0x4>

08000e72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e72:	b480      	push	{r7}
 8000e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e76:	e7fe      	b.n	8000e76 <BusFault_Handler+0x4>

08000e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <UsageFault_Handler+0x4>

08000e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eac:	f000 f8d0 	bl	8001050 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000eb0:	bf00      	nop
 8000eb2:	bd80      	pop	{r7, pc}

08000eb4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <USART1_IRQHandler+0x10>)
 8000eba:	f001 fa05 	bl	80022c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000094 	.word	0x20000094

08000ec8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <_sbrk+0x5c>)
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <_sbrk+0x60>)
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000edc:	4b13      	ldr	r3, [pc, #76]	; (8000f2c <_sbrk+0x64>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d102      	bne.n	8000eea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <_sbrk+0x64>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <_sbrk+0x68>)
 8000ee8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <_sbrk+0x64>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	693a      	ldr	r2, [r7, #16]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d207      	bcs.n	8000f08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ef8:	f002 f91e 	bl	8003138 <__errno>
 8000efc:	4603      	mov	r3, r0
 8000efe:	220c      	movs	r2, #12
 8000f00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f02:	f04f 33ff 	mov.w	r3, #4294967295
 8000f06:	e009      	b.n	8000f1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <_sbrk+0x64>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f0e:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <_sbrk+0x64>)
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	4413      	add	r3, r2
 8000f16:	4a05      	ldr	r2, [pc, #20]	; (8000f2c <_sbrk+0x64>)
 8000f18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20020000 	.word	0x20020000
 8000f28:	00000400 	.word	0x00000400
 8000f2c:	2000011c 	.word	0x2000011c
 8000f30:	20000138 	.word	0x20000138

08000f34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f38:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <SystemInit+0x20>)
 8000f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <SystemInit+0x20>)
 8000f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f90 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f5c:	480d      	ldr	r0, [pc, #52]	; (8000f94 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f5e:	490e      	ldr	r1, [pc, #56]	; (8000f98 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f60:	4a0e      	ldr	r2, [pc, #56]	; (8000f9c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f64:	e002      	b.n	8000f6c <LoopCopyDataInit>

08000f66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f6a:	3304      	adds	r3, #4

08000f6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f70:	d3f9      	bcc.n	8000f66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f72:	4a0b      	ldr	r2, [pc, #44]	; (8000fa0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f74:	4c0b      	ldr	r4, [pc, #44]	; (8000fa4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f78:	e001      	b.n	8000f7e <LoopFillZerobss>

08000f7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f7c:	3204      	adds	r2, #4

08000f7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f80:	d3fb      	bcc.n	8000f7a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f82:	f7ff ffd7 	bl	8000f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f86:	f002 f8dd 	bl	8003144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f8a:	f7ff faf7 	bl	800057c <main>
  bx  lr    
 8000f8e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f98:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000f9c:	0800356c 	.word	0x0800356c
  ldr r2, =_sbss
 8000fa0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000fa4:	20000134 	.word	0x20000134

08000fa8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fa8:	e7fe      	b.n	8000fa8 <ADC_IRQHandler>
	...

08000fac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fb0:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <HAL_Init+0x40>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0d      	ldr	r2, [pc, #52]	; (8000fec <HAL_Init+0x40>)
 8000fb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fbc:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_Init+0x40>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_Init+0x40>)
 8000fc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fc6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_Init+0x40>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a07      	ldr	r2, [pc, #28]	; (8000fec <HAL_Init+0x40>)
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fd4:	2003      	movs	r0, #3
 8000fd6:	f000 f92b 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f808 	bl	8000ff0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fe0:	f7ff fe90 	bl	8000d04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fe4:	2300      	movs	r3, #0
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023c00 	.word	0x40023c00

08000ff0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ff8:	4b12      	ldr	r3, [pc, #72]	; (8001044 <HAL_InitTick+0x54>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_InitTick+0x58>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001006:	fbb3 f3f1 	udiv	r3, r3, r1
 800100a:	fbb2 f3f3 	udiv	r3, r2, r3
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f943 	bl	800129a <HAL_SYSTICK_Config>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800101a:	2301      	movs	r3, #1
 800101c:	e00e      	b.n	800103c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	2b0f      	cmp	r3, #15
 8001022:	d80a      	bhi.n	800103a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001024:	2200      	movs	r2, #0
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295
 800102c:	f000 f90b 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001030:	4a06      	ldr	r2, [pc, #24]	; (800104c <HAL_InitTick+0x5c>)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001036:	2300      	movs	r3, #0
 8001038:	e000      	b.n	800103c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800103a:	2301      	movs	r3, #1
}
 800103c:	4618      	mov	r0, r3
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	20000008 	.word	0x20000008
 8001048:	20000010 	.word	0x20000010
 800104c:	2000000c 	.word	0x2000000c

08001050 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001054:	4b06      	ldr	r3, [pc, #24]	; (8001070 <HAL_IncTick+0x20>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	461a      	mov	r2, r3
 800105a:	4b06      	ldr	r3, [pc, #24]	; (8001074 <HAL_IncTick+0x24>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4413      	add	r3, r2
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_IncTick+0x24>)
 8001062:	6013      	str	r3, [r2, #0]
}
 8001064:	bf00      	nop
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	20000010 	.word	0x20000010
 8001074:	20000120 	.word	0x20000120

08001078 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  return uwTick;
 800107c:	4b03      	ldr	r3, [pc, #12]	; (800108c <HAL_GetTick+0x14>)
 800107e:	681b      	ldr	r3, [r3, #0]
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	20000120 	.word	0x20000120

08001090 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001090:	b480      	push	{r7}
 8001092:	b085      	sub	sp, #20
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f003 0307 	and.w	r3, r3, #7
 800109e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010a0:	4b0c      	ldr	r3, [pc, #48]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	68db      	ldr	r3, [r3, #12]
 80010a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010ac:	4013      	ands	r3, r2
 80010ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010c2:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <__NVIC_SetPriorityGrouping+0x44>)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	60d3      	str	r3, [r2, #12]
}
 80010c8:	bf00      	nop
 80010ca:	3714      	adds	r7, #20
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010dc:	4b04      	ldr	r3, [pc, #16]	; (80010f0 <__NVIC_GetPriorityGrouping+0x18>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	0a1b      	lsrs	r3, r3, #8
 80010e2:	f003 0307 	and.w	r3, r3, #7
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b083      	sub	sp, #12
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001102:	2b00      	cmp	r3, #0
 8001104:	db0b      	blt.n	800111e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001106:	79fb      	ldrb	r3, [r7, #7]
 8001108:	f003 021f 	and.w	r2, r3, #31
 800110c:	4907      	ldr	r1, [pc, #28]	; (800112c <__NVIC_EnableIRQ+0x38>)
 800110e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001112:	095b      	lsrs	r3, r3, #5
 8001114:	2001      	movs	r0, #1
 8001116:	fa00 f202 	lsl.w	r2, r0, r2
 800111a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	e000e100 	.word	0xe000e100

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	79fb      	ldrb	r3, [r7, #7]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff29 	bl	8001090 <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001258:	f7ff ff3e 	bl	80010d8 <__NVIC_GetPriorityGrouping>
 800125c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125e:	687a      	ldr	r2, [r7, #4]
 8001260:	68b9      	ldr	r1, [r7, #8]
 8001262:	6978      	ldr	r0, [r7, #20]
 8001264:	f7ff ff8e 	bl	8001184 <NVIC_EncodePriority>
 8001268:	4602      	mov	r2, r0
 800126a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800126e:	4611      	mov	r1, r2
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff5d 	bl	8001130 <__NVIC_SetPriority>
}
 8001276:	bf00      	nop
 8001278:	3718      	adds	r7, #24
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}

0800127e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800127e:	b580      	push	{r7, lr}
 8001280:	b082      	sub	sp, #8
 8001282:	af00      	add	r7, sp, #0
 8001284:	4603      	mov	r3, r0
 8001286:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff ff31 	bl	80010f4 <__NVIC_EnableIRQ>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b082      	sub	sp, #8
 800129e:	af00      	add	r7, sp, #0
 80012a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012a2:	6878      	ldr	r0, [r7, #4]
 80012a4:	f7ff ffa2 	bl	80011ec <SysTick_Config>
 80012a8:	4603      	mov	r3, r0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b084      	sub	sp, #16
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012be:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff feda 	bl	8001078 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d008      	beq.n	80012e4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2280      	movs	r2, #128	; 0x80
 80012d6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2200      	movs	r2, #0
 80012dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80012e0:	2301      	movs	r3, #1
 80012e2:	e052      	b.n	800138a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f022 0216 	bic.w	r2, r2, #22
 80012f2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	695a      	ldr	r2, [r3, #20]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001302:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	2b00      	cmp	r3, #0
 800130a:	d103      	bne.n	8001314 <HAL_DMA_Abort+0x62>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001310:	2b00      	cmp	r3, #0
 8001312:	d007      	beq.n	8001324 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0208 	bic.w	r2, r2, #8
 8001322:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 0201 	bic.w	r2, r2, #1
 8001332:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001334:	e013      	b.n	800135e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001336:	f7ff fe9f 	bl	8001078 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b05      	cmp	r3, #5
 8001342:	d90c      	bls.n	800135e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2220      	movs	r2, #32
 8001348:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2203      	movs	r2, #3
 800134e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2200      	movs	r2, #0
 8001356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e015      	b.n	800138a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b00      	cmp	r3, #0
 800136a:	d1e4      	bne.n	8001336 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001370:	223f      	movs	r2, #63	; 0x3f
 8001372:	409a      	lsls	r2, r3
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2201      	movs	r2, #1
 800137c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d004      	beq.n	80013b0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2280      	movs	r2, #128	; 0x80
 80013aa:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e00c      	b.n	80013ca <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2205      	movs	r2, #5
 80013b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f022 0201 	bic.w	r2, r2, #1
 80013c6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013d8:	b480      	push	{r7}
 80013da:	b089      	sub	sp, #36	; 0x24
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80013e2:	2300      	movs	r3, #0
 80013e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	61fb      	str	r3, [r7, #28]
 80013f2:	e159      	b.n	80016a8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80013f4:	2201      	movs	r2, #1
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	fa02 f303 	lsl.w	r3, r2, r3
 80013fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	4013      	ands	r3, r2
 8001406:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001408:	693a      	ldr	r2, [r7, #16]
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	429a      	cmp	r2, r3
 800140e:	f040 8148 	bne.w	80016a2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f003 0303 	and.w	r3, r3, #3
 800141a:	2b01      	cmp	r3, #1
 800141c:	d005      	beq.n	800142a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001426:	2b02      	cmp	r3, #2
 8001428:	d130      	bne.n	800148c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001430:	69fb      	ldr	r3, [r7, #28]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	2203      	movs	r2, #3
 8001436:	fa02 f303 	lsl.w	r3, r2, r3
 800143a:	43db      	mvns	r3, r3
 800143c:	69ba      	ldr	r2, [r7, #24]
 800143e:	4013      	ands	r3, r2
 8001440:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	68da      	ldr	r2, [r3, #12]
 8001446:	69fb      	ldr	r3, [r7, #28]
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4313      	orrs	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001460:	2201      	movs	r2, #1
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	fa02 f303 	lsl.w	r3, r2, r3
 8001468:	43db      	mvns	r3, r3
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	4013      	ands	r3, r2
 800146e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 0201 	and.w	r2, r3, #1
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	fa02 f303 	lsl.w	r3, r2, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4313      	orrs	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f003 0303 	and.w	r3, r3, #3
 8001494:	2b03      	cmp	r3, #3
 8001496:	d017      	beq.n	80014c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	005b      	lsls	r3, r3, #1
 80014a2:	2203      	movs	r2, #3
 80014a4:	fa02 f303 	lsl.w	r3, r2, r3
 80014a8:	43db      	mvns	r3, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4013      	ands	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	689a      	ldr	r2, [r3, #8]
 80014b4:	69fb      	ldr	r3, [r7, #28]
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	4313      	orrs	r3, r2
 80014c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 0303 	and.w	r3, r3, #3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d123      	bne.n	800151c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	08da      	lsrs	r2, r3, #3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3208      	adds	r2, #8
 80014dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80014e2:	69fb      	ldr	r3, [r7, #28]
 80014e4:	f003 0307 	and.w	r3, r3, #7
 80014e8:	009b      	lsls	r3, r3, #2
 80014ea:	220f      	movs	r2, #15
 80014ec:	fa02 f303 	lsl.w	r3, r2, r3
 80014f0:	43db      	mvns	r3, r3
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	4013      	ands	r3, r2
 80014f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	691a      	ldr	r2, [r3, #16]
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	fa02 f303 	lsl.w	r3, r2, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4313      	orrs	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	08da      	lsrs	r2, r3, #3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	3208      	adds	r2, #8
 8001516:	69b9      	ldr	r1, [r7, #24]
 8001518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	2203      	movs	r2, #3
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0203 	and.w	r2, r3, #3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001558:	2b00      	cmp	r3, #0
 800155a:	f000 80a2 	beq.w	80016a2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
 8001562:	4b57      	ldr	r3, [pc, #348]	; (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001566:	4a56      	ldr	r2, [pc, #344]	; (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001568:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800156c:	6453      	str	r3, [r2, #68]	; 0x44
 800156e:	4b54      	ldr	r3, [pc, #336]	; (80016c0 <HAL_GPIO_Init+0x2e8>)
 8001570:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001572:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800157a:	4a52      	ldr	r2, [pc, #328]	; (80016c4 <HAL_GPIO_Init+0x2ec>)
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	089b      	lsrs	r3, r3, #2
 8001580:	3302      	adds	r3, #2
 8001582:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0303 	and.w	r3, r3, #3
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a49      	ldr	r2, [pc, #292]	; (80016c8 <HAL_GPIO_Init+0x2f0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d019      	beq.n	80015da <HAL_GPIO_Init+0x202>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a48      	ldr	r2, [pc, #288]	; (80016cc <HAL_GPIO_Init+0x2f4>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d013      	beq.n	80015d6 <HAL_GPIO_Init+0x1fe>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a47      	ldr	r2, [pc, #284]	; (80016d0 <HAL_GPIO_Init+0x2f8>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d00d      	beq.n	80015d2 <HAL_GPIO_Init+0x1fa>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <HAL_GPIO_Init+0x2fc>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d007      	beq.n	80015ce <HAL_GPIO_Init+0x1f6>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	4a45      	ldr	r2, [pc, #276]	; (80016d8 <HAL_GPIO_Init+0x300>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d101      	bne.n	80015ca <HAL_GPIO_Init+0x1f2>
 80015c6:	2304      	movs	r3, #4
 80015c8:	e008      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015ca:	2307      	movs	r3, #7
 80015cc:	e006      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015ce:	2303      	movs	r3, #3
 80015d0:	e004      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015d2:	2302      	movs	r3, #2
 80015d4:	e002      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015d6:	2301      	movs	r3, #1
 80015d8:	e000      	b.n	80015dc <HAL_GPIO_Init+0x204>
 80015da:	2300      	movs	r3, #0
 80015dc:	69fa      	ldr	r2, [r7, #28]
 80015de:	f002 0203 	and.w	r2, r2, #3
 80015e2:	0092      	lsls	r2, r2, #2
 80015e4:	4093      	lsls	r3, r2
 80015e6:	69ba      	ldr	r2, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015ec:	4935      	ldr	r1, [pc, #212]	; (80016c4 <HAL_GPIO_Init+0x2ec>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	089b      	lsrs	r3, r3, #2
 80015f2:	3302      	adds	r3, #2
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015fa:	4b38      	ldr	r3, [pc, #224]	; (80016dc <HAL_GPIO_Init+0x304>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800161e:	4a2f      	ldr	r2, [pc, #188]	; (80016dc <HAL_GPIO_Init+0x304>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_GPIO_Init+0x304>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001648:	4a24      	ldr	r2, [pc, #144]	; (80016dc <HAL_GPIO_Init+0x304>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <HAL_GPIO_Init+0x304>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001654:	693b      	ldr	r3, [r7, #16]
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800166a:	69ba      	ldr	r2, [r7, #24]
 800166c:	693b      	ldr	r3, [r7, #16]
 800166e:	4313      	orrs	r3, r2
 8001670:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001672:	4a1a      	ldr	r2, [pc, #104]	; (80016dc <HAL_GPIO_Init+0x304>)
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001678:	4b18      	ldr	r3, [pc, #96]	; (80016dc <HAL_GPIO_Init+0x304>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	43db      	mvns	r3, r3
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	4013      	ands	r3, r2
 8001686:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001690:	2b00      	cmp	r3, #0
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	4313      	orrs	r3, r2
 800169a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800169c:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_GPIO_Init+0x304>)
 800169e:	69bb      	ldr	r3, [r7, #24]
 80016a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3301      	adds	r3, #1
 80016a6:	61fb      	str	r3, [r7, #28]
 80016a8:	69fb      	ldr	r3, [r7, #28]
 80016aa:	2b0f      	cmp	r3, #15
 80016ac:	f67f aea2 	bls.w	80013f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80016b0:	bf00      	nop
 80016b2:	bf00      	nop
 80016b4:	3724      	adds	r7, #36	; 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	40013800 	.word	0x40013800
 80016c8:	40020000 	.word	0x40020000
 80016cc:	40020400 	.word	0x40020400
 80016d0:	40020800 	.word	0x40020800
 80016d4:	40020c00 	.word	0x40020c00
 80016d8:	40021000 	.word	0x40021000
 80016dc:	40013c00 	.word	0x40013c00

080016e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b083      	sub	sp, #12
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	460b      	mov	r3, r1
 80016ea:	807b      	strh	r3, [r7, #2]
 80016ec:	4613      	mov	r3, r2
 80016ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016f0:	787b      	ldrb	r3, [r7, #1]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016f6:	887a      	ldrh	r2, [r7, #2]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016fc:	e003      	b.n	8001706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016fe:	887b      	ldrh	r3, [r7, #2]
 8001700:	041a      	lsls	r2, r3, #16
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	619a      	str	r2, [r3, #24]
}
 8001706:	bf00      	nop
 8001708:	370c      	adds	r7, #12
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr
	...

08001714 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b086      	sub	sp, #24
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e267      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d075      	beq.n	800181e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001732:	4b88      	ldr	r3, [pc, #544]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	2b04      	cmp	r3, #4
 800173c:	d00c      	beq.n	8001758 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800173e:	4b85      	ldr	r3, [pc, #532]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001746:	2b08      	cmp	r3, #8
 8001748:	d112      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800174a:	4b82      	ldr	r3, [pc, #520]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001752:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4b7e      	ldr	r3, [pc, #504]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d05b      	beq.n	800181c <HAL_RCC_OscConfig+0x108>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d157      	bne.n	800181c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e242      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x74>
 800177a:	4b76      	ldr	r3, [pc, #472]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a75      	ldr	r2, [pc, #468]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b70      	ldr	r3, [pc, #448]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a6f      	ldr	r2, [pc, #444]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b6d      	ldr	r3, [pc, #436]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6c      	ldr	r2, [pc, #432]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 80017ac:	4b69      	ldr	r3, [pc, #420]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a68      	ldr	r2, [pc, #416]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b66      	ldr	r3, [pc, #408]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a65      	ldr	r2, [pc, #404]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017cc:	f7ff fc54 	bl	8001078 <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fc50 	bl	8001078 <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e207      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017e6:	4b5b      	ldr	r3, [pc, #364]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xc0>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f4:	f7ff fc40 	bl	8001078 <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fc3c 	bl	8001078 <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e1f3      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800180e:	4b51      	ldr	r3, [pc, #324]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0xe8>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d063      	beq.n	80018f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800182a:	4b4a      	ldr	r3, [pc, #296]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	2b00      	cmp	r3, #0
 8001834:	d00b      	beq.n	800184e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	4b47      	ldr	r3, [pc, #284]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800183e:	2b08      	cmp	r3, #8
 8001840:	d11c      	bne.n	800187c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001842:	4b44      	ldr	r3, [pc, #272]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d116      	bne.n	800187c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800184e:	4b41      	ldr	r3, [pc, #260]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_RCC_OscConfig+0x152>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	2b01      	cmp	r3, #1
 8001860:	d001      	beq.n	8001866 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e1c7      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001866:	4b3b      	ldr	r3, [pc, #236]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	691b      	ldr	r3, [r3, #16]
 8001872:	00db      	lsls	r3, r3, #3
 8001874:	4937      	ldr	r1, [pc, #220]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001876:	4313      	orrs	r3, r2
 8001878:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800187a:	e03a      	b.n	80018f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d020      	beq.n	80018c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001884:	4b34      	ldr	r3, [pc, #208]	; (8001958 <HAL_RCC_OscConfig+0x244>)
 8001886:	2201      	movs	r2, #1
 8001888:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fbf5 	bl	8001078 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff fbf1 	bl	8001078 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e1a8      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0302 	and.w	r3, r3, #2
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d0f0      	beq.n	8001892 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b0:	4b28      	ldr	r3, [pc, #160]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	4925      	ldr	r1, [pc, #148]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80018c0:	4313      	orrs	r3, r2
 80018c2:	600b      	str	r3, [r1, #0]
 80018c4:	e015      	b.n	80018f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018c6:	4b24      	ldr	r3, [pc, #144]	; (8001958 <HAL_RCC_OscConfig+0x244>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018cc:	f7ff fbd4 	bl	8001078 <HAL_GetTick>
 80018d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018d2:	e008      	b.n	80018e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018d4:	f7ff fbd0 	bl	8001078 <HAL_GetTick>
 80018d8:	4602      	mov	r2, r0
 80018da:	693b      	ldr	r3, [r7, #16]
 80018dc:	1ad3      	subs	r3, r2, r3
 80018de:	2b02      	cmp	r3, #2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e187      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018e6:	4b1b      	ldr	r3, [pc, #108]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f0      	bne.n	80018d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0308 	and.w	r3, r3, #8
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d036      	beq.n	800196c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	695b      	ldr	r3, [r3, #20]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d016      	beq.n	8001934 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001906:	4b15      	ldr	r3, [pc, #84]	; (800195c <HAL_RCC_OscConfig+0x248>)
 8001908:	2201      	movs	r2, #1
 800190a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fbb4 	bl	8001078 <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001914:	f7ff fbb0 	bl	8001078 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e167      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <HAL_RCC_OscConfig+0x240>)
 8001928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800192a:	f003 0302 	and.w	r3, r3, #2
 800192e:	2b00      	cmp	r3, #0
 8001930:	d0f0      	beq.n	8001914 <HAL_RCC_OscConfig+0x200>
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_OscConfig+0x248>)
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800193a:	f7ff fb9d 	bl	8001078 <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001940:	e00e      	b.n	8001960 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fb99 	bl	8001078 <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d907      	bls.n	8001960 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e150      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
 8001954:	40023800 	.word	0x40023800
 8001958:	42470000 	.word	0x42470000
 800195c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001960:	4b88      	ldr	r3, [pc, #544]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d1ea      	bne.n	8001942 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	2b00      	cmp	r3, #0
 8001976:	f000 8097 	beq.w	8001aa8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800197a:	2300      	movs	r3, #0
 800197c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800197e:	4b81      	ldr	r3, [pc, #516]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10f      	bne.n	80019aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	4b7d      	ldr	r3, [pc, #500]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a7c      	ldr	r2, [pc, #496]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b7a      	ldr	r3, [pc, #488]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019a2:	60bb      	str	r3, [r7, #8]
 80019a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019a6:	2301      	movs	r3, #1
 80019a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019aa:	4b77      	ldr	r3, [pc, #476]	; (8001b88 <HAL_RCC_OscConfig+0x474>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d118      	bne.n	80019e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80019b6:	4b74      	ldr	r3, [pc, #464]	; (8001b88 <HAL_RCC_OscConfig+0x474>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a73      	ldr	r2, [pc, #460]	; (8001b88 <HAL_RCC_OscConfig+0x474>)
 80019bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019c2:	f7ff fb59 	bl	8001078 <HAL_GetTick>
 80019c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019c8:	e008      	b.n	80019dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019ca:	f7ff fb55 	bl	8001078 <HAL_GetTick>
 80019ce:	4602      	mov	r2, r0
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	1ad3      	subs	r3, r2, r3
 80019d4:	2b02      	cmp	r3, #2
 80019d6:	d901      	bls.n	80019dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80019d8:	2303      	movs	r3, #3
 80019da:	e10c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019dc:	4b6a      	ldr	r3, [pc, #424]	; (8001b88 <HAL_RCC_OscConfig+0x474>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0f0      	beq.n	80019ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d106      	bne.n	80019fe <HAL_RCC_OscConfig+0x2ea>
 80019f0:	4b64      	ldr	r3, [pc, #400]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 80019f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019f4:	4a63      	ldr	r2, [pc, #396]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 80019f6:	f043 0301 	orr.w	r3, r3, #1
 80019fa:	6713      	str	r3, [r2, #112]	; 0x70
 80019fc:	e01c      	b.n	8001a38 <HAL_RCC_OscConfig+0x324>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	2b05      	cmp	r3, #5
 8001a04:	d10c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x30c>
 8001a06:	4b5f      	ldr	r3, [pc, #380]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0a:	4a5e      	ldr	r2, [pc, #376]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a0c:	f043 0304 	orr.w	r3, r3, #4
 8001a10:	6713      	str	r3, [r2, #112]	; 0x70
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a16:	4a5b      	ldr	r2, [pc, #364]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a18:	f043 0301 	orr.w	r3, r3, #1
 8001a1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001a1e:	e00b      	b.n	8001a38 <HAL_RCC_OscConfig+0x324>
 8001a20:	4b58      	ldr	r3, [pc, #352]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a24:	4a57      	ldr	r2, [pc, #348]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a26:	f023 0301 	bic.w	r3, r3, #1
 8001a2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001a2c:	4b55      	ldr	r3, [pc, #340]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a30:	4a54      	ldr	r2, [pc, #336]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a32:	f023 0304 	bic.w	r3, r3, #4
 8001a36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d015      	beq.n	8001a6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a40:	f7ff fb1a 	bl	8001078 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a46:	e00a      	b.n	8001a5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a48:	f7ff fb16 	bl	8001078 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e0cb      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a5e:	4b49      	ldr	r3, [pc, #292]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0ee      	beq.n	8001a48 <HAL_RCC_OscConfig+0x334>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6c:	f7ff fb04 	bl	8001078 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a72:	e00a      	b.n	8001a8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a74:	f7ff fb00 	bl	8001078 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0b5      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8a:	4b3e      	ldr	r3, [pc, #248]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a8e:	f003 0302 	and.w	r3, r3, #2
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d1ee      	bne.n	8001a74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a96:	7dfb      	ldrb	r3, [r7, #23]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d105      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9c:	4b39      	ldr	r3, [pc, #228]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa0:	4a38      	ldr	r2, [pc, #224]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001aa2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	699b      	ldr	r3, [r3, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	f000 80a1 	beq.w	8001bf4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ab2:	4b34      	ldr	r3, [pc, #208]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001ab4:	689b      	ldr	r3, [r3, #8]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b08      	cmp	r3, #8
 8001abc:	d05c      	beq.n	8001b78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	699b      	ldr	r3, [r3, #24]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d141      	bne.n	8001b4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac6:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x478>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff fad4 	bl	8001078 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ad4:	f7ff fad0 	bl	8001078 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e087      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ae6:	4b27      	ldr	r3, [pc, #156]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d1f0      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b00:	019b      	lsls	r3, r3, #6
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b08:	085b      	lsrs	r3, r3, #1
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	041b      	lsls	r3, r3, #16
 8001b0e:	431a      	orrs	r2, r3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b14:	061b      	lsls	r3, r3, #24
 8001b16:	491b      	ldr	r1, [pc, #108]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x478>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b22:	f7ff faa9 	bl	8001078 <HAL_GetTick>
 8001b26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b28:	e008      	b.n	8001b3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b2a:	f7ff faa5 	bl	8001078 <HAL_GetTick>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	1ad3      	subs	r3, r2, r3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d901      	bls.n	8001b3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	e05c      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b3c:	4b11      	ldr	r3, [pc, #68]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d0f0      	beq.n	8001b2a <HAL_RCC_OscConfig+0x416>
 8001b48:	e054      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x478>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b50:	f7ff fa92 	bl	8001078 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff fa8e 	bl	8001078 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e045      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b06      	ldr	r3, [pc, #24]	; (8001b84 <HAL_RCC_OscConfig+0x470>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x444>
 8001b76:	e03d      	b.n	8001bf4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d107      	bne.n	8001b90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e038      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
 8001b84:	40023800 	.word	0x40023800
 8001b88:	40007000 	.word	0x40007000
 8001b8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_RCC_OscConfig+0x4ec>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d028      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d121      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bc6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d111      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bd6:	085b      	lsrs	r3, r3, #1
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d107      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	e000      	b.n	8001bf6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001bf4:	2300      	movs	r3, #0
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3718      	adds	r7, #24
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023800 	.word	0x40023800

08001c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e0cc      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d90c      	bls.n	8001c40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c26:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c2e:	4b63      	ldr	r3, [pc, #396]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0307 	and.w	r3, r3, #7
 8001c36:	683a      	ldr	r2, [r7, #0]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d001      	beq.n	8001c40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e0b8      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 0302 	and.w	r3, r3, #2
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d020      	beq.n	8001c8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d005      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c58:	4b59      	ldr	r3, [pc, #356]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	4a58      	ldr	r2, [pc, #352]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0308 	and.w	r3, r3, #8
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d005      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a52      	ldr	r2, [pc, #328]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c7c:	4b50      	ldr	r3, [pc, #320]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	494d      	ldr	r1, [pc, #308]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f003 0301 	and.w	r3, r3, #1
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d044      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d107      	bne.n	8001cb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	4b47      	ldr	r3, [pc, #284]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d119      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e07f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d003      	beq.n	8001cc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001cbe:	2b03      	cmp	r3, #3
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b3f      	ldr	r3, [pc, #252]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d109      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cd2:	4b3b      	ldr	r3, [pc, #236]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e067      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ce2:	4b37      	ldr	r3, [pc, #220]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce4:	689b      	ldr	r3, [r3, #8]
 8001ce6:	f023 0203 	bic.w	r2, r3, #3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	4934      	ldr	r1, [pc, #208]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cf4:	f7ff f9c0 	bl	8001078 <HAL_GetTick>
 8001cf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cfa:	e00a      	b.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfc:	f7ff f9bc 	bl	8001078 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e04f      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d12:	4b2b      	ldr	r3, [pc, #172]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 020c 	and.w	r2, r3, #12
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	009b      	lsls	r3, r3, #2
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d1eb      	bne.n	8001cfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d24:	4b25      	ldr	r3, [pc, #148]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d20c      	bcs.n	8001d4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d32:	4b22      	ldr	r3, [pc, #136]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d34:	683a      	ldr	r2, [r7, #0]
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <HAL_RCC_ClockConfig+0x1b8>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0307 	and.w	r3, r3, #7
 8001d42:	683a      	ldr	r2, [r7, #0]
 8001d44:	429a      	cmp	r2, r3
 8001d46:	d001      	beq.n	8001d4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e032      	b.n	8001db2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0304 	and.w	r3, r3, #4
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d008      	beq.n	8001d6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d58:	4b19      	ldr	r3, [pc, #100]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4916      	ldr	r1, [pc, #88]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d009      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d76:	4b12      	ldr	r3, [pc, #72]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	691b      	ldr	r3, [r3, #16]
 8001d82:	00db      	lsls	r3, r3, #3
 8001d84:	490e      	ldr	r1, [pc, #56]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d8a:	f000 f821 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	4b0b      	ldr	r3, [pc, #44]	; (8001dc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	091b      	lsrs	r3, r3, #4
 8001d96:	f003 030f 	and.w	r3, r3, #15
 8001d9a:	490a      	ldr	r1, [pc, #40]	; (8001dc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001d9c:	5ccb      	ldrb	r3, [r1, r3]
 8001d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001da2:	4a09      	ldr	r2, [pc, #36]	; (8001dc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001da6:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1c8>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff f920 	bl	8000ff0 <HAL_InitTick>

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	40023c00 	.word	0x40023c00
 8001dc0:	40023800 	.word	0x40023800
 8001dc4:	08003440 	.word	0x08003440
 8001dc8:	20000008 	.word	0x20000008
 8001dcc:	2000000c 	.word	0x2000000c

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001dd4:	b090      	sub	sp, #64	; 0x40
 8001dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
 8001ddc:	2300      	movs	r3, #0
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001de0:	2300      	movs	r3, #0
 8001de2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001de4:	2300      	movs	r3, #0
 8001de6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001de8:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d00d      	beq.n	8001e10 <HAL_RCC_GetSysClockFreq+0x40>
 8001df4:	2b08      	cmp	r3, #8
 8001df6:	f200 80a1 	bhi.w	8001f3c <HAL_RCC_GetSysClockFreq+0x16c>
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d002      	beq.n	8001e04 <HAL_RCC_GetSysClockFreq+0x34>
 8001dfe:	2b04      	cmp	r3, #4
 8001e00:	d003      	beq.n	8001e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e02:	e09b      	b.n	8001f3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e04:	4b53      	ldr	r3, [pc, #332]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001e06:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001e08:	e09b      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001e0a:	4b53      	ldr	r3, [pc, #332]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001e0e:	e098      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001e10:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001e18:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001e1a:	4b4d      	ldr	r3, [pc, #308]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d028      	beq.n	8001e78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	099b      	lsrs	r3, r3, #6
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	623b      	str	r3, [r7, #32]
 8001e30:	627a      	str	r2, [r7, #36]	; 0x24
 8001e32:	6a3b      	ldr	r3, [r7, #32]
 8001e34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4b47      	ldr	r3, [pc, #284]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e3c:	fb03 f201 	mul.w	r2, r3, r1
 8001e40:	2300      	movs	r3, #0
 8001e42:	fb00 f303 	mul.w	r3, r0, r3
 8001e46:	4413      	add	r3, r2
 8001e48:	4a43      	ldr	r2, [pc, #268]	; (8001f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8001e4a:	fba0 1202 	umull	r1, r2, r0, r2
 8001e4e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e50:	460a      	mov	r2, r1
 8001e52:	62ba      	str	r2, [r7, #40]	; 0x28
 8001e54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e56:	4413      	add	r3, r2
 8001e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	61bb      	str	r3, [r7, #24]
 8001e60:	61fa      	str	r2, [r7, #28]
 8001e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001e6a:	f7fe f9b5 	bl	80001d8 <__aeabi_uldivmod>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4613      	mov	r3, r2
 8001e74:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e76:	e053      	b.n	8001f20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e78:	4b35      	ldr	r3, [pc, #212]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	099b      	lsrs	r3, r3, #6
 8001e7e:	2200      	movs	r2, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	617a      	str	r2, [r7, #20]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001e8a:	f04f 0b00 	mov.w	fp, #0
 8001e8e:	4652      	mov	r2, sl
 8001e90:	465b      	mov	r3, fp
 8001e92:	f04f 0000 	mov.w	r0, #0
 8001e96:	f04f 0100 	mov.w	r1, #0
 8001e9a:	0159      	lsls	r1, r3, #5
 8001e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ea0:	0150      	lsls	r0, r2, #5
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	ebb2 080a 	subs.w	r8, r2, sl
 8001eaa:	eb63 090b 	sbc.w	r9, r3, fp
 8001eae:	f04f 0200 	mov.w	r2, #0
 8001eb2:	f04f 0300 	mov.w	r3, #0
 8001eb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001eba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001ebe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001ec2:	ebb2 0408 	subs.w	r4, r2, r8
 8001ec6:	eb63 0509 	sbc.w	r5, r3, r9
 8001eca:	f04f 0200 	mov.w	r2, #0
 8001ece:	f04f 0300 	mov.w	r3, #0
 8001ed2:	00eb      	lsls	r3, r5, #3
 8001ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ed8:	00e2      	lsls	r2, r4, #3
 8001eda:	4614      	mov	r4, r2
 8001edc:	461d      	mov	r5, r3
 8001ede:	eb14 030a 	adds.w	r3, r4, sl
 8001ee2:	603b      	str	r3, [r7, #0]
 8001ee4:	eb45 030b 	adc.w	r3, r5, fp
 8001ee8:	607b      	str	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	f04f 0300 	mov.w	r3, #0
 8001ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ef6:	4629      	mov	r1, r5
 8001ef8:	028b      	lsls	r3, r1, #10
 8001efa:	4621      	mov	r1, r4
 8001efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f00:	4621      	mov	r1, r4
 8001f02:	028a      	lsls	r2, r1, #10
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60bb      	str	r3, [r7, #8]
 8001f0e:	60fa      	str	r2, [r7, #12]
 8001f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f14:	f7fe f960 	bl	80001d8 <__aeabi_uldivmod>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	0c1b      	lsrs	r3, r3, #16
 8001f26:	f003 0303 	and.w	r3, r3, #3
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	005b      	lsls	r3, r3, #1
 8001f2e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001f30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f3a:	e002      	b.n	8001f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f3c:	4b05      	ldr	r3, [pc, #20]	; (8001f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8001f3e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3740      	adds	r7, #64	; 0x40
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f4e:	bf00      	nop
 8001f50:	40023800 	.word	0x40023800
 8001f54:	00f42400 	.word	0x00f42400
 8001f58:	017d7840 	.word	0x017d7840

08001f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f60:	4b03      	ldr	r3, [pc, #12]	; (8001f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f62:	681b      	ldr	r3, [r3, #0]
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000008 	.word	0x20000008

08001f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001f78:	f7ff fff0 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	4b05      	ldr	r3, [pc, #20]	; (8001f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	0a9b      	lsrs	r3, r3, #10
 8001f84:	f003 0307 	and.w	r3, r3, #7
 8001f88:	4903      	ldr	r1, [pc, #12]	; (8001f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8a:	5ccb      	ldrb	r3, [r1, r3]
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40023800 	.word	0x40023800
 8001f98:	08003450 	.word	0x08003450

08001f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001fa0:	f7ff ffdc 	bl	8001f5c <HAL_RCC_GetHCLKFreq>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	4b05      	ldr	r3, [pc, #20]	; (8001fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
 8001faa:	0b5b      	lsrs	r3, r3, #13
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	4903      	ldr	r1, [pc, #12]	; (8001fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb2:	5ccb      	ldrb	r3, [r1, r3]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	40023800 	.word	0x40023800
 8001fc0:	08003450 	.word	0x08003450

08001fc4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e03f      	b.n	8002056 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fdc:	b2db      	uxtb	r3, r3
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d106      	bne.n	8001ff0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7fe feb2 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2224      	movs	r2, #36	; 0x24
 8001ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68da      	ldr	r2, [r3, #12]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002006:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 fe1d 	bl	8002c48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	691a      	ldr	r2, [r3, #16]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800201c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800202c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68da      	ldr	r2, [r3, #12]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800203c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2220      	movs	r2, #32
 8002048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2220      	movs	r2, #32
 8002050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002054:	2300      	movs	r3, #0
}
 8002056:	4618      	mov	r0, r3
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800205e:	b580      	push	{r7, lr}
 8002060:	b08a      	sub	sp, #40	; 0x28
 8002062:	af02      	add	r7, sp, #8
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	603b      	str	r3, [r7, #0]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002078:	b2db      	uxtb	r3, r3
 800207a:	2b20      	cmp	r3, #32
 800207c:	d17c      	bne.n	8002178 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d002      	beq.n	800208a <HAL_UART_Transmit+0x2c>
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e075      	b.n	800217a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002094:	2b01      	cmp	r3, #1
 8002096:	d101      	bne.n	800209c <HAL_UART_Transmit+0x3e>
 8002098:	2302      	movs	r3, #2
 800209a:	e06e      	b.n	800217a <HAL_UART_Transmit+0x11c>
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2200      	movs	r2, #0
 80020a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	2221      	movs	r2, #33	; 0x21
 80020ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80020b2:	f7fe ffe1 	bl	8001078 <HAL_GetTick>
 80020b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	88fa      	ldrh	r2, [r7, #6]
 80020bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	88fa      	ldrh	r2, [r7, #6]
 80020c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020cc:	d108      	bne.n	80020e0 <HAL_UART_Transmit+0x82>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	691b      	ldr	r3, [r3, #16]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d104      	bne.n	80020e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	e003      	b.n	80020e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020e4:	2300      	movs	r3, #0
 80020e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80020f0:	e02a      	b.n	8002148 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	9300      	str	r3, [sp, #0]
 80020f6:	697b      	ldr	r3, [r7, #20]
 80020f8:	2200      	movs	r2, #0
 80020fa:	2180      	movs	r1, #128	; 0x80
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 fb9b 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002108:	2303      	movs	r3, #3
 800210a:	e036      	b.n	800217a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10b      	bne.n	800212a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	881b      	ldrh	r3, [r3, #0]
 8002116:	461a      	mov	r2, r3
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002120:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	3302      	adds	r3, #2
 8002126:	61bb      	str	r3, [r7, #24]
 8002128:	e007      	b.n	800213a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	3301      	adds	r3, #1
 8002138:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800213e:	b29b      	uxth	r3, r3
 8002140:	3b01      	subs	r3, #1
 8002142:	b29a      	uxth	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800214c:	b29b      	uxth	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d1cf      	bne.n	80020f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	9300      	str	r3, [sp, #0]
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	2200      	movs	r2, #0
 800215a:	2140      	movs	r1, #64	; 0x40
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f000 fb6b 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e006      	b.n	800217a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	2220      	movs	r2, #32
 8002170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	e000      	b.n	800217a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002178:	2302      	movs	r3, #2
  }
}
 800217a:	4618      	mov	r0, r3
 800217c:	3720      	adds	r7, #32
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b08a      	sub	sp, #40	; 0x28
 8002186:	af02      	add	r7, sp, #8
 8002188:	60f8      	str	r0, [r7, #12]
 800218a:	60b9      	str	r1, [r7, #8]
 800218c:	603b      	str	r3, [r7, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002192:	2300      	movs	r3, #0
 8002194:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b20      	cmp	r3, #32
 80021a0:	f040 808c 	bne.w	80022bc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d002      	beq.n	80021b0 <HAL_UART_Receive+0x2e>
 80021aa:	88fb      	ldrh	r3, [r7, #6]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d101      	bne.n	80021b4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e084      	b.n	80022be <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_UART_Receive+0x40>
 80021be:	2302      	movs	r3, #2
 80021c0:	e07d      	b.n	80022be <HAL_UART_Receive+0x13c>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2201      	movs	r2, #1
 80021c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2200      	movs	r2, #0
 80021ce:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2222      	movs	r2, #34	; 0x22
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2200      	movs	r2, #0
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80021de:	f7fe ff4b 	bl	8001078 <HAL_GetTick>
 80021e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	88fa      	ldrh	r2, [r7, #6]
 80021e8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	88fa      	ldrh	r2, [r7, #6]
 80021ee:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021f8:	d108      	bne.n	800220c <HAL_UART_Receive+0x8a>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	691b      	ldr	r3, [r3, #16]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d104      	bne.n	800220c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	61bb      	str	r3, [r7, #24]
 800220a:	e003      	b.n	8002214 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002210:	2300      	movs	r3, #0
 8002212:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2200      	movs	r2, #0
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800221c:	e043      	b.n	80022a6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	2200      	movs	r2, #0
 8002226:	2120      	movs	r1, #32
 8002228:	68f8      	ldr	r0, [r7, #12]
 800222a:	f000 fb05 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e042      	b.n	80022be <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	b29b      	uxth	r3, r3
 8002246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800224a:	b29a      	uxth	r2, r3
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002250:	69bb      	ldr	r3, [r7, #24]
 8002252:	3302      	adds	r3, #2
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	e01f      	b.n	8002298 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002260:	d007      	beq.n	8002272 <HAL_UART_Receive+0xf0>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10a      	bne.n	8002280 <HAL_UART_Receive+0xfe>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	b2da      	uxtb	r2, r3
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e008      	b.n	8002292 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	b2db      	uxtb	r3, r3
 8002288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800228c:	b2da      	uxtb	r2, r3
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	3301      	adds	r3, #1
 8002296:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d1b6      	bne.n	800221e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80022b8:	2300      	movs	r3, #0
 80022ba:	e000      	b.n	80022be <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
  }
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3720      	adds	r7, #32
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
	...

080022c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b0ba      	sub	sp, #232	; 0xe8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	695b      	ldr	r3, [r3, #20]
 80022ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80022ee:	2300      	movs	r3, #0
 80022f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80022fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022fe:	f003 030f 	and.w	r3, r3, #15
 8002302:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002306:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800230a:	2b00      	cmp	r3, #0
 800230c:	d10f      	bne.n	800232e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800230e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002312:	f003 0320 	and.w	r3, r3, #32
 8002316:	2b00      	cmp	r3, #0
 8002318:	d009      	beq.n	800232e <HAL_UART_IRQHandler+0x66>
 800231a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800231e:	f003 0320 	and.w	r3, r3, #32
 8002322:	2b00      	cmp	r3, #0
 8002324:	d003      	beq.n	800232e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 fbd3 	bl	8002ad2 <UART_Receive_IT>
      return;
 800232c:	e256      	b.n	80027dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800232e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 80de 	beq.w	80024f4 <HAL_UART_IRQHandler+0x22c>
 8002338:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800233c:	f003 0301 	and.w	r3, r3, #1
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002344:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002348:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80d1 	beq.w	80024f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00b      	beq.n	8002376 <HAL_UART_IRQHandler+0xae>
 800235e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d005      	beq.n	8002376 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	f043 0201 	orr.w	r2, r3, #1
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800237a:	f003 0304 	and.w	r3, r3, #4
 800237e:	2b00      	cmp	r3, #0
 8002380:	d00b      	beq.n	800239a <HAL_UART_IRQHandler+0xd2>
 8002382:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002392:	f043 0202 	orr.w	r2, r3, #2
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800239a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d00b      	beq.n	80023be <HAL_UART_IRQHandler+0xf6>
 80023a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d005      	beq.n	80023be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	f043 0204 	orr.w	r2, r3, #4
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80023be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d011      	beq.n	80023ee <HAL_UART_IRQHandler+0x126>
 80023ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ce:	f003 0320 	and.w	r3, r3, #32
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d105      	bne.n	80023e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80023d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d005      	beq.n	80023ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	f043 0208 	orr.w	r2, r3, #8
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 81ed 	beq.w	80027d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80023f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d008      	beq.n	8002416 <HAL_UART_IRQHandler+0x14e>
 8002404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002408:	f003 0320 	and.w	r3, r3, #32
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fb5e 	bl	8002ad2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002420:	2b40      	cmp	r3, #64	; 0x40
 8002422:	bf0c      	ite	eq
 8002424:	2301      	moveq	r3, #1
 8002426:	2300      	movne	r3, #0
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d103      	bne.n	8002442 <HAL_UART_IRQHandler+0x17a>
 800243a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800243e:	2b00      	cmp	r3, #0
 8002440:	d04f      	beq.n	80024e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002442:	6878      	ldr	r0, [r7, #4]
 8002444:	f000 fa66 	bl	8002914 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b40      	cmp	r3, #64	; 0x40
 8002454:	d141      	bne.n	80024da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	3314      	adds	r3, #20
 800245c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002460:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002464:	e853 3f00 	ldrex	r3, [r3]
 8002468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800246c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002474:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	3314      	adds	r3, #20
 800247e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002482:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002486:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800248a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800248e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002492:	e841 2300 	strex	r3, r2, [r1]
 8002496:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800249a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1d9      	bne.n	8002456 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d013      	beq.n	80024d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	4a7d      	ldr	r2, [pc, #500]	; (80026a4 <HAL_UART_IRQHandler+0x3dc>)
 80024b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fe ff6b 	bl	8001392 <HAL_DMA_Abort_IT>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d016      	beq.n	80024f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024c8:	687a      	ldr	r2, [r7, #4]
 80024ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80024cc:	4610      	mov	r0, r2
 80024ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d0:	e00e      	b.n	80024f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f000 f99a 	bl	800280c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024d8:	e00a      	b.n	80024f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80024da:	6878      	ldr	r0, [r7, #4]
 80024dc:	f000 f996 	bl	800280c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024e0:	e006      	b.n	80024f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 f992 	bl	800280c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80024ee:	e170      	b.n	80027d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024f0:	bf00      	nop
    return;
 80024f2:	e16e      	b.n	80027d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	f040 814a 	bne.w	8002792 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80024fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002502:	f003 0310 	and.w	r3, r3, #16
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 8143 	beq.w	8002792 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800250c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002510:	f003 0310 	and.w	r3, r3, #16
 8002514:	2b00      	cmp	r3, #0
 8002516:	f000 813c 	beq.w	8002792 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800251a:	2300      	movs	r3, #0
 800251c:	60bb      	str	r3, [r7, #8]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60bb      	str	r3, [r7, #8]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	60bb      	str	r3, [r7, #8]
 800252e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800253a:	2b40      	cmp	r3, #64	; 0x40
 800253c:	f040 80b4 	bne.w	80026a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800254c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 8140 	beq.w	80027d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800255a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800255e:	429a      	cmp	r2, r3
 8002560:	f080 8139 	bcs.w	80027d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800256a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002576:	f000 8088 	beq.w	800268a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	330c      	adds	r3, #12
 8002580:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002588:	e853 3f00 	ldrex	r3, [r3]
 800258c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002590:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002594:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002598:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	330c      	adds	r3, #12
 80025a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80025a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80025aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80025b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80025b6:	e841 2300 	strex	r3, r2, [r1]
 80025ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80025be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d1d9      	bne.n	800257a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	3314      	adds	r3, #20
 80025cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025d0:	e853 3f00 	ldrex	r3, [r3]
 80025d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80025d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025d8:	f023 0301 	bic.w	r3, r3, #1
 80025dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	3314      	adds	r3, #20
 80025e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80025ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80025ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80025f6:	e841 2300 	strex	r3, r2, [r1]
 80025fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80025fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d1e1      	bne.n	80025c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	3314      	adds	r3, #20
 8002608:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800260a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002612:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002614:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002618:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	3314      	adds	r3, #20
 8002622:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002626:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002628:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800262a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800262c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800262e:	e841 2300 	strex	r3, r2, [r1]
 8002632:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002634:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1e3      	bne.n	8002602 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2220      	movs	r2, #32
 800263e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	330c      	adds	r3, #12
 800264e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002652:	e853 3f00 	ldrex	r3, [r3]
 8002656:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800265a:	f023 0310 	bic.w	r3, r3, #16
 800265e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	330c      	adds	r3, #12
 8002668:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800266c:	65ba      	str	r2, [r7, #88]	; 0x58
 800266e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002670:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002672:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002674:	e841 2300 	strex	r3, r2, [r1]
 8002678:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800267a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800267c:	2b00      	cmp	r3, #0
 800267e:	d1e3      	bne.n	8002648 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	4618      	mov	r0, r3
 8002686:	f7fe fe14 	bl	80012b2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002692:	b29b      	uxth	r3, r3
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	b29b      	uxth	r3, r3
 8002698:	4619      	mov	r1, r3
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f8c0 	bl	8002820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80026a0:	e099      	b.n	80027d6 <HAL_UART_IRQHandler+0x50e>
 80026a2:	bf00      	nop
 80026a4:	080029db 	.word	0x080029db
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	1ad3      	subs	r3, r2, r3
 80026b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026bc:	b29b      	uxth	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	f000 808b 	beq.w	80027da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80026c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	f000 8086 	beq.w	80027da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	330c      	adds	r3, #12
 80026d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	e853 3f00 	ldrex	r3, [r3]
 80026dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80026de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80026e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	330c      	adds	r3, #12
 80026ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80026f2:	647a      	str	r2, [r7, #68]	; 0x44
 80026f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80026f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026fa:	e841 2300 	strex	r3, r2, [r1]
 80026fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1e3      	bne.n	80026ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	3314      	adds	r3, #20
 800270c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	e853 3f00 	ldrex	r3, [r3]
 8002714:	623b      	str	r3, [r7, #32]
   return(result);
 8002716:	6a3b      	ldr	r3, [r7, #32]
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	3314      	adds	r3, #20
 8002726:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800272a:	633a      	str	r2, [r7, #48]	; 0x30
 800272c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800272e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002730:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002732:	e841 2300 	strex	r3, r2, [r1]
 8002736:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1e3      	bne.n	8002706 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2220      	movs	r2, #32
 8002742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	330c      	adds	r3, #12
 8002752:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	e853 3f00 	ldrex	r3, [r3]
 800275a:	60fb      	str	r3, [r7, #12]
   return(result);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f023 0310 	bic.w	r3, r3, #16
 8002762:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	330c      	adds	r3, #12
 800276c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002770:	61fa      	str	r2, [r7, #28]
 8002772:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002774:	69b9      	ldr	r1, [r7, #24]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	e841 2300 	strex	r3, r2, [r1]
 800277c:	617b      	str	r3, [r7, #20]
   return(result);
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d1e3      	bne.n	800274c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002784:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002788:	4619      	mov	r1, r3
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f848 	bl	8002820 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002790:	e023      	b.n	80027da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800279a:	2b00      	cmp	r3, #0
 800279c:	d009      	beq.n	80027b2 <HAL_UART_IRQHandler+0x4ea>
 800279e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f929 	bl	8002a02 <UART_Transmit_IT>
    return;
 80027b0:	e014      	b.n	80027dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80027b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d00e      	beq.n	80027dc <HAL_UART_IRQHandler+0x514>
 80027be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80027c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d008      	beq.n	80027dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f969 	bl	8002aa2 <UART_EndTransmit_IT>
    return;
 80027d0:	e004      	b.n	80027dc <HAL_UART_IRQHandler+0x514>
    return;
 80027d2:	bf00      	nop
 80027d4:	e002      	b.n	80027dc <HAL_UART_IRQHandler+0x514>
      return;
 80027d6:	bf00      	nop
 80027d8:	e000      	b.n	80027dc <HAL_UART_IRQHandler+0x514>
      return;
 80027da:	bf00      	nop
  }
}
 80027dc:	37e8      	adds	r7, #232	; 0xe8
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop

080027e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b083      	sub	sp, #12
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002800:	bf00      	nop
 8002802:	370c      	adds	r7, #12
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr

0800280c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b090      	sub	sp, #64	; 0x40
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	e050      	b.n	80028ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d04c      	beq.n	80028ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002852:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <UART_WaitOnFlagUntilTimeout+0x30>
 8002858:	f7fe fc0e 	bl	8001078 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002864:	429a      	cmp	r2, r3
 8002866:	d241      	bcs.n	80028ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	330c      	adds	r3, #12
 800286e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002872:	e853 3f00 	ldrex	r3, [r3]
 8002876:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800287a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800287e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	330c      	adds	r3, #12
 8002886:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002888:	637a      	str	r2, [r7, #52]	; 0x34
 800288a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800288c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800288e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002890:	e841 2300 	strex	r3, r2, [r1]
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	2b00      	cmp	r3, #0
 800289a:	d1e5      	bne.n	8002868 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	3314      	adds	r3, #20
 80028a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	e853 3f00 	ldrex	r3, [r3]
 80028aa:	613b      	str	r3, [r7, #16]
   return(result);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	3314      	adds	r3, #20
 80028ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80028bc:	623a      	str	r2, [r7, #32]
 80028be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028c0:	69f9      	ldr	r1, [r7, #28]
 80028c2:	6a3a      	ldr	r2, [r7, #32]
 80028c4:	e841 2300 	strex	r3, r2, [r1]
 80028c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80028ca:	69bb      	ldr	r3, [r7, #24]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d1e5      	bne.n	800289c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2220      	movs	r2, #32
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2220      	movs	r2, #32
 80028dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2200      	movs	r2, #0
 80028e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e00f      	b.n	800290c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	4013      	ands	r3, r2
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	bf0c      	ite	eq
 80028fc:	2301      	moveq	r3, #1
 80028fe:	2300      	movne	r3, #0
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	79fb      	ldrb	r3, [r7, #7]
 8002906:	429a      	cmp	r2, r3
 8002908:	d09f      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3740      	adds	r7, #64	; 0x40
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002914:	b480      	push	{r7}
 8002916:	b095      	sub	sp, #84	; 0x54
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	e853 3f00 	ldrex	r3, [r3]
 800292a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	330c      	adds	r3, #12
 800293a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800293c:	643a      	str	r2, [r7, #64]	; 0x40
 800293e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002940:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002942:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002944:	e841 2300 	strex	r3, r2, [r1]
 8002948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800294a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1e5      	bne.n	800291c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3314      	adds	r3, #20
 8002956:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	e853 3f00 	ldrex	r3, [r3]
 800295e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002960:	69fb      	ldr	r3, [r7, #28]
 8002962:	f023 0301 	bic.w	r3, r3, #1
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3314      	adds	r3, #20
 800296e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002970:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002978:	e841 2300 	strex	r3, r2, [r1]
 800297c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800297e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d1e5      	bne.n	8002950 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002988:	2b01      	cmp	r3, #1
 800298a:	d119      	bne.n	80029c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	330c      	adds	r3, #12
 8002992:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	e853 3f00 	ldrex	r3, [r3]
 800299a:	60bb      	str	r3, [r7, #8]
   return(result);
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	f023 0310 	bic.w	r3, r3, #16
 80029a2:	647b      	str	r3, [r7, #68]	; 0x44
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	330c      	adds	r3, #12
 80029aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80029ac:	61ba      	str	r2, [r7, #24]
 80029ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029b0:	6979      	ldr	r1, [r7, #20]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	e841 2300 	strex	r3, r2, [r1]
 80029b8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1e5      	bne.n	800298c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2220      	movs	r2, #32
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80029ce:	bf00      	nop
 80029d0:	3754      	adds	r7, #84	; 0x54
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2200      	movs	r2, #0
 80029ec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80029f4:	68f8      	ldr	r0, [r7, #12]
 80029f6:	f7ff ff09 	bl	800280c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80029fa:	bf00      	nop
 80029fc:	3710      	adds	r7, #16
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b21      	cmp	r3, #33	; 0x21
 8002a14:	d13e      	bne.n	8002a94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	689b      	ldr	r3, [r3, #8]
 8002a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a1e:	d114      	bne.n	8002a4a <UART_Transmit_IT+0x48>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d110      	bne.n	8002a4a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	6a1b      	ldr	r3, [r3, #32]
 8002a2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	461a      	mov	r2, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6a1b      	ldr	r3, [r3, #32]
 8002a42:	1c9a      	adds	r2, r3, #2
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	621a      	str	r2, [r3, #32]
 8002a48:	e008      	b.n	8002a5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6a1b      	ldr	r3, [r3, #32]
 8002a4e:	1c59      	adds	r1, r3, #1
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6211      	str	r1, [r2, #32]
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	3b01      	subs	r3, #1
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	4619      	mov	r1, r3
 8002a6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d10f      	bne.n	8002a90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002a90:	2300      	movs	r3, #0
 8002a92:	e000      	b.n	8002a96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002a94:	2302      	movs	r3, #2
  }
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3714      	adds	r7, #20
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b082      	sub	sp, #8
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68da      	ldr	r2, [r3, #12]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ab8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2220      	movs	r2, #32
 8002abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f7ff fe8e 	bl	80027e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b08c      	sub	sp, #48	; 0x30
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b22      	cmp	r3, #34	; 0x22
 8002ae4:	f040 80ab 	bne.w	8002c3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d117      	bne.n	8002b22 <UART_Receive_IT+0x50>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d113      	bne.n	8002b22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	b29b      	uxth	r3, r3
 8002b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b1a:	1c9a      	adds	r2, r3, #2
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	629a      	str	r2, [r3, #40]	; 0x28
 8002b20:	e026      	b.n	8002b70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b34:	d007      	beq.n	8002b46 <UART_Receive_IT+0x74>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10a      	bne.n	8002b54 <UART_Receive_IT+0x82>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	691b      	ldr	r3, [r3, #16]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	b2da      	uxtb	r2, r3
 8002b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b50:	701a      	strb	r2, [r3, #0]
 8002b52:	e008      	b.n	8002b66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b6a:	1c5a      	adds	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	3b01      	subs	r3, #1
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	687a      	ldr	r2, [r7, #4]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d15a      	bne.n	8002c3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68da      	ldr	r2, [r3, #12]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f022 0220 	bic.w	r2, r2, #32
 8002b92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695a      	ldr	r2, [r3, #20]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f022 0201 	bic.w	r2, r2, #1
 8002bb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2220      	movs	r2, #32
 8002bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d135      	bne.n	8002c30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	330c      	adds	r3, #12
 8002bd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	e853 3f00 	ldrex	r3, [r3]
 8002bd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	f023 0310 	bic.w	r3, r3, #16
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	623a      	str	r2, [r7, #32]
 8002bec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bee:	69f9      	ldr	r1, [r7, #28]
 8002bf0:	6a3a      	ldr	r2, [r7, #32]
 8002bf2:	e841 2300 	strex	r3, r2, [r1]
 8002bf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1e5      	bne.n	8002bca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0310 	and.w	r3, r3, #16
 8002c08:	2b10      	cmp	r3, #16
 8002c0a:	d10a      	bne.n	8002c22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	60fb      	str	r3, [r7, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	60fb      	str	r3, [r7, #12]
 8002c20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002c26:	4619      	mov	r1, r3
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f7ff fdf9 	bl	8002820 <HAL_UARTEx_RxEventCallback>
 8002c2e:	e002      	b.n	8002c36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff fde1 	bl	80027f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c36:	2300      	movs	r3, #0
 8002c38:	e002      	b.n	8002c40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	e000      	b.n	8002c40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8002c3e:	2302      	movs	r3, #2
  }
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3730      	adds	r7, #48	; 0x30
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c4c:	b0c0      	sub	sp, #256	; 0x100
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c64:	68d9      	ldr	r1, [r3, #12]
 8002c66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	ea40 0301 	orr.w	r3, r0, r1
 8002c70:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	431a      	orrs	r2, r3
 8002c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002ca0:	f021 010c 	bic.w	r1, r1, #12
 8002ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8002cae:	430b      	orrs	r3, r1
 8002cb0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc2:	6999      	ldr	r1, [r3, #24]
 8002cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cc8:	681a      	ldr	r2, [r3, #0]
 8002cca:	ea40 0301 	orr.w	r3, r0, r1
 8002cce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	4b8f      	ldr	r3, [pc, #572]	; (8002f14 <UART_SetConfig+0x2cc>)
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d005      	beq.n	8002ce8 <UART_SetConfig+0xa0>
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	4b8d      	ldr	r3, [pc, #564]	; (8002f18 <UART_SetConfig+0x2d0>)
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d104      	bne.n	8002cf2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002ce8:	f7ff f958 	bl	8001f9c <HAL_RCC_GetPCLK2Freq>
 8002cec:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002cf0:	e003      	b.n	8002cfa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002cf2:	f7ff f93f 	bl	8001f74 <HAL_RCC_GetPCLK1Freq>
 8002cf6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002cfe:	69db      	ldr	r3, [r3, #28]
 8002d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d04:	f040 810c 	bne.w	8002f20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002d12:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002d16:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002d1a:	4622      	mov	r2, r4
 8002d1c:	462b      	mov	r3, r5
 8002d1e:	1891      	adds	r1, r2, r2
 8002d20:	65b9      	str	r1, [r7, #88]	; 0x58
 8002d22:	415b      	adcs	r3, r3
 8002d24:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d26:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	eb12 0801 	adds.w	r8, r2, r1
 8002d30:	4629      	mov	r1, r5
 8002d32:	eb43 0901 	adc.w	r9, r3, r1
 8002d36:	f04f 0200 	mov.w	r2, #0
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	4699      	mov	r9, r3
 8002d4e:	4623      	mov	r3, r4
 8002d50:	eb18 0303 	adds.w	r3, r8, r3
 8002d54:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d58:	462b      	mov	r3, r5
 8002d5a:	eb49 0303 	adc.w	r3, r9, r3
 8002d5e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002d6e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002d72:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002d76:	460b      	mov	r3, r1
 8002d78:	18db      	adds	r3, r3, r3
 8002d7a:	653b      	str	r3, [r7, #80]	; 0x50
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	eb42 0303 	adc.w	r3, r2, r3
 8002d82:	657b      	str	r3, [r7, #84]	; 0x54
 8002d84:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002d88:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8002d8c:	f7fd fa24 	bl	80001d8 <__aeabi_uldivmod>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4b61      	ldr	r3, [pc, #388]	; (8002f1c <UART_SetConfig+0x2d4>)
 8002d96:	fba3 2302 	umull	r2, r3, r3, r2
 8002d9a:	095b      	lsrs	r3, r3, #5
 8002d9c:	011c      	lsls	r4, r3, #4
 8002d9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002da2:	2200      	movs	r2, #0
 8002da4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002da8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8002dac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8002db0:	4642      	mov	r2, r8
 8002db2:	464b      	mov	r3, r9
 8002db4:	1891      	adds	r1, r2, r2
 8002db6:	64b9      	str	r1, [r7, #72]	; 0x48
 8002db8:	415b      	adcs	r3, r3
 8002dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002dbc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002dc0:	4641      	mov	r1, r8
 8002dc2:	eb12 0a01 	adds.w	sl, r2, r1
 8002dc6:	4649      	mov	r1, r9
 8002dc8:	eb43 0b01 	adc.w	fp, r3, r1
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002dd8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002ddc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002de0:	4692      	mov	sl, r2
 8002de2:	469b      	mov	fp, r3
 8002de4:	4643      	mov	r3, r8
 8002de6:	eb1a 0303 	adds.w	r3, sl, r3
 8002dea:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002dee:	464b      	mov	r3, r9
 8002df0:	eb4b 0303 	adc.w	r3, fp, r3
 8002df4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002e04:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002e08:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	18db      	adds	r3, r3, r3
 8002e10:	643b      	str	r3, [r7, #64]	; 0x40
 8002e12:	4613      	mov	r3, r2
 8002e14:	eb42 0303 	adc.w	r3, r2, r3
 8002e18:	647b      	str	r3, [r7, #68]	; 0x44
 8002e1a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8002e1e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002e22:	f7fd f9d9 	bl	80001d8 <__aeabi_uldivmod>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4611      	mov	r1, r2
 8002e2c:	4b3b      	ldr	r3, [pc, #236]	; (8002f1c <UART_SetConfig+0x2d4>)
 8002e2e:	fba3 2301 	umull	r2, r3, r3, r1
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	2264      	movs	r2, #100	; 0x64
 8002e36:	fb02 f303 	mul.w	r3, r2, r3
 8002e3a:	1acb      	subs	r3, r1, r3
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002e42:	4b36      	ldr	r3, [pc, #216]	; (8002f1c <UART_SetConfig+0x2d4>)
 8002e44:	fba3 2302 	umull	r2, r3, r3, r2
 8002e48:	095b      	lsrs	r3, r3, #5
 8002e4a:	005b      	lsls	r3, r3, #1
 8002e4c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002e50:	441c      	add	r4, r3
 8002e52:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002e56:	2200      	movs	r2, #0
 8002e58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e5c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002e60:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002e64:	4642      	mov	r2, r8
 8002e66:	464b      	mov	r3, r9
 8002e68:	1891      	adds	r1, r2, r2
 8002e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8002e6c:	415b      	adcs	r3, r3
 8002e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002e74:	4641      	mov	r1, r8
 8002e76:	1851      	adds	r1, r2, r1
 8002e78:	6339      	str	r1, [r7, #48]	; 0x30
 8002e7a:	4649      	mov	r1, r9
 8002e7c:	414b      	adcs	r3, r1
 8002e7e:	637b      	str	r3, [r7, #52]	; 0x34
 8002e80:	f04f 0200 	mov.w	r2, #0
 8002e84:	f04f 0300 	mov.w	r3, #0
 8002e88:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8002e8c:	4659      	mov	r1, fp
 8002e8e:	00cb      	lsls	r3, r1, #3
 8002e90:	4651      	mov	r1, sl
 8002e92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002e96:	4651      	mov	r1, sl
 8002e98:	00ca      	lsls	r2, r1, #3
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4642      	mov	r2, r8
 8002ea2:	189b      	adds	r3, r3, r2
 8002ea4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002ea8:	464b      	mov	r3, r9
 8002eaa:	460a      	mov	r2, r1
 8002eac:	eb42 0303 	adc.w	r3, r2, r3
 8002eb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002eb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002ec0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8002ec4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8002ec8:	460b      	mov	r3, r1
 8002eca:	18db      	adds	r3, r3, r3
 8002ecc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ece:	4613      	mov	r3, r2
 8002ed0:	eb42 0303 	adc.w	r3, r2, r3
 8002ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002eda:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8002ede:	f7fd f97b 	bl	80001d8 <__aeabi_uldivmod>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <UART_SetConfig+0x2d4>)
 8002ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8002eec:	095b      	lsrs	r3, r3, #5
 8002eee:	2164      	movs	r1, #100	; 0x64
 8002ef0:	fb01 f303 	mul.w	r3, r1, r3
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	3332      	adds	r3, #50	; 0x32
 8002efa:	4a08      	ldr	r2, [pc, #32]	; (8002f1c <UART_SetConfig+0x2d4>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	095b      	lsrs	r3, r3, #5
 8002f02:	f003 0207 	and.w	r2, r3, #7
 8002f06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4422      	add	r2, r4
 8002f0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f10:	e105      	b.n	800311e <UART_SetConfig+0x4d6>
 8002f12:	bf00      	nop
 8002f14:	40011000 	.word	0x40011000
 8002f18:	40011400 	.word	0x40011400
 8002f1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002f24:	2200      	movs	r2, #0
 8002f26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002f2a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002f2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002f32:	4642      	mov	r2, r8
 8002f34:	464b      	mov	r3, r9
 8002f36:	1891      	adds	r1, r2, r2
 8002f38:	6239      	str	r1, [r7, #32]
 8002f3a:	415b      	adcs	r3, r3
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f42:	4641      	mov	r1, r8
 8002f44:	1854      	adds	r4, r2, r1
 8002f46:	4649      	mov	r1, r9
 8002f48:	eb43 0501 	adc.w	r5, r3, r1
 8002f4c:	f04f 0200 	mov.w	r2, #0
 8002f50:	f04f 0300 	mov.w	r3, #0
 8002f54:	00eb      	lsls	r3, r5, #3
 8002f56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f5a:	00e2      	lsls	r2, r4, #3
 8002f5c:	4614      	mov	r4, r2
 8002f5e:	461d      	mov	r5, r3
 8002f60:	4643      	mov	r3, r8
 8002f62:	18e3      	adds	r3, r4, r3
 8002f64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002f68:	464b      	mov	r3, r9
 8002f6a:	eb45 0303 	adc.w	r3, r5, r3
 8002f6e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	2200      	movs	r2, #0
 8002f7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002f7e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002f8e:	4629      	mov	r1, r5
 8002f90:	008b      	lsls	r3, r1, #2
 8002f92:	4621      	mov	r1, r4
 8002f94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f98:	4621      	mov	r1, r4
 8002f9a:	008a      	lsls	r2, r1, #2
 8002f9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002fa0:	f7fd f91a 	bl	80001d8 <__aeabi_uldivmod>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4b60      	ldr	r3, [pc, #384]	; (800312c <UART_SetConfig+0x4e4>)
 8002faa:	fba3 2302 	umull	r2, r3, r3, r2
 8002fae:	095b      	lsrs	r3, r3, #5
 8002fb0:	011c      	lsls	r4, r3, #4
 8002fb2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fbc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002fc0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002fc4:	4642      	mov	r2, r8
 8002fc6:	464b      	mov	r3, r9
 8002fc8:	1891      	adds	r1, r2, r2
 8002fca:	61b9      	str	r1, [r7, #24]
 8002fcc:	415b      	adcs	r3, r3
 8002fce:	61fb      	str	r3, [r7, #28]
 8002fd0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fd4:	4641      	mov	r1, r8
 8002fd6:	1851      	adds	r1, r2, r1
 8002fd8:	6139      	str	r1, [r7, #16]
 8002fda:	4649      	mov	r1, r9
 8002fdc:	414b      	adcs	r3, r1
 8002fde:	617b      	str	r3, [r7, #20]
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 0300 	mov.w	r3, #0
 8002fe8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002fec:	4659      	mov	r1, fp
 8002fee:	00cb      	lsls	r3, r1, #3
 8002ff0:	4651      	mov	r1, sl
 8002ff2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ff6:	4651      	mov	r1, sl
 8002ff8:	00ca      	lsls	r2, r1, #3
 8002ffa:	4610      	mov	r0, r2
 8002ffc:	4619      	mov	r1, r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	4642      	mov	r2, r8
 8003002:	189b      	adds	r3, r3, r2
 8003004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003008:	464b      	mov	r3, r9
 800300a:	460a      	mov	r2, r1
 800300c:	eb42 0303 	adc.w	r3, r2, r3
 8003010:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	67bb      	str	r3, [r7, #120]	; 0x78
 800301e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800302c:	4649      	mov	r1, r9
 800302e:	008b      	lsls	r3, r1, #2
 8003030:	4641      	mov	r1, r8
 8003032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003036:	4641      	mov	r1, r8
 8003038:	008a      	lsls	r2, r1, #2
 800303a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800303e:	f7fd f8cb 	bl	80001d8 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4b39      	ldr	r3, [pc, #228]	; (800312c <UART_SetConfig+0x4e4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	; 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	3332      	adds	r3, #50	; 0x32
 800305a:	4a34      	ldr	r2, [pc, #208]	; (800312c <UART_SetConfig+0x4e4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003066:	441c      	add	r4, r3
 8003068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800306c:	2200      	movs	r2, #0
 800306e:	673b      	str	r3, [r7, #112]	; 0x70
 8003070:	677a      	str	r2, [r7, #116]	; 0x74
 8003072:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003076:	4642      	mov	r2, r8
 8003078:	464b      	mov	r3, r9
 800307a:	1891      	adds	r1, r2, r2
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	415b      	adcs	r3, r3
 8003080:	60fb      	str	r3, [r7, #12]
 8003082:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003086:	4641      	mov	r1, r8
 8003088:	1851      	adds	r1, r2, r1
 800308a:	6039      	str	r1, [r7, #0]
 800308c:	4649      	mov	r1, r9
 800308e:	414b      	adcs	r3, r1
 8003090:	607b      	str	r3, [r7, #4]
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	f04f 0300 	mov.w	r3, #0
 800309a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800309e:	4659      	mov	r1, fp
 80030a0:	00cb      	lsls	r3, r1, #3
 80030a2:	4651      	mov	r1, sl
 80030a4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030a8:	4651      	mov	r1, sl
 80030aa:	00ca      	lsls	r2, r1, #3
 80030ac:	4610      	mov	r0, r2
 80030ae:	4619      	mov	r1, r3
 80030b0:	4603      	mov	r3, r0
 80030b2:	4642      	mov	r2, r8
 80030b4:	189b      	adds	r3, r3, r2
 80030b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030b8:	464b      	mov	r3, r9
 80030ba:	460a      	mov	r2, r1
 80030bc:	eb42 0303 	adc.w	r3, r2, r3
 80030c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80030c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	2200      	movs	r2, #0
 80030ca:	663b      	str	r3, [r7, #96]	; 0x60
 80030cc:	667a      	str	r2, [r7, #100]	; 0x64
 80030ce:	f04f 0200 	mov.w	r2, #0
 80030d2:	f04f 0300 	mov.w	r3, #0
 80030d6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80030da:	4649      	mov	r1, r9
 80030dc:	008b      	lsls	r3, r1, #2
 80030de:	4641      	mov	r1, r8
 80030e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030e4:	4641      	mov	r1, r8
 80030e6:	008a      	lsls	r2, r1, #2
 80030e8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80030ec:	f7fd f874 	bl	80001d8 <__aeabi_uldivmod>
 80030f0:	4602      	mov	r2, r0
 80030f2:	460b      	mov	r3, r1
 80030f4:	4b0d      	ldr	r3, [pc, #52]	; (800312c <UART_SetConfig+0x4e4>)
 80030f6:	fba3 1302 	umull	r1, r3, r3, r2
 80030fa:	095b      	lsrs	r3, r3, #5
 80030fc:	2164      	movs	r1, #100	; 0x64
 80030fe:	fb01 f303 	mul.w	r3, r1, r3
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	011b      	lsls	r3, r3, #4
 8003106:	3332      	adds	r3, #50	; 0x32
 8003108:	4a08      	ldr	r2, [pc, #32]	; (800312c <UART_SetConfig+0x4e4>)
 800310a:	fba2 2303 	umull	r2, r3, r2, r3
 800310e:	095b      	lsrs	r3, r3, #5
 8003110:	f003 020f 	and.w	r2, r3, #15
 8003114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4422      	add	r2, r4
 800311c:	609a      	str	r2, [r3, #8]
}
 800311e:	bf00      	nop
 8003120:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003124:	46bd      	mov	sp, r7
 8003126:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800312a:	bf00      	nop
 800312c:	51eb851f 	.word	0x51eb851f

08003130 <atoi>:
 8003130:	220a      	movs	r2, #10
 8003132:	2100      	movs	r1, #0
 8003134:	f000 b960 	b.w	80033f8 <strtol>

08003138 <__errno>:
 8003138:	4b01      	ldr	r3, [pc, #4]	; (8003140 <__errno+0x8>)
 800313a:	6818      	ldr	r0, [r3, #0]
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	20000014 	.word	0x20000014

08003144 <__libc_init_array>:
 8003144:	b570      	push	{r4, r5, r6, lr}
 8003146:	4d0d      	ldr	r5, [pc, #52]	; (800317c <__libc_init_array+0x38>)
 8003148:	4c0d      	ldr	r4, [pc, #52]	; (8003180 <__libc_init_array+0x3c>)
 800314a:	1b64      	subs	r4, r4, r5
 800314c:	10a4      	asrs	r4, r4, #2
 800314e:	2600      	movs	r6, #0
 8003150:	42a6      	cmp	r6, r4
 8003152:	d109      	bne.n	8003168 <__libc_init_array+0x24>
 8003154:	4d0b      	ldr	r5, [pc, #44]	; (8003184 <__libc_init_array+0x40>)
 8003156:	4c0c      	ldr	r4, [pc, #48]	; (8003188 <__libc_init_array+0x44>)
 8003158:	f000 f966 	bl	8003428 <_init>
 800315c:	1b64      	subs	r4, r4, r5
 800315e:	10a4      	asrs	r4, r4, #2
 8003160:	2600      	movs	r6, #0
 8003162:	42a6      	cmp	r6, r4
 8003164:	d105      	bne.n	8003172 <__libc_init_array+0x2e>
 8003166:	bd70      	pop	{r4, r5, r6, pc}
 8003168:	f855 3b04 	ldr.w	r3, [r5], #4
 800316c:	4798      	blx	r3
 800316e:	3601      	adds	r6, #1
 8003170:	e7ee      	b.n	8003150 <__libc_init_array+0xc>
 8003172:	f855 3b04 	ldr.w	r3, [r5], #4
 8003176:	4798      	blx	r3
 8003178:	3601      	adds	r6, #1
 800317a:	e7f2      	b.n	8003162 <__libc_init_array+0x1e>
 800317c:	08003564 	.word	0x08003564
 8003180:	08003564 	.word	0x08003564
 8003184:	08003564 	.word	0x08003564
 8003188:	08003568 	.word	0x08003568

0800318c <malloc>:
 800318c:	4b02      	ldr	r3, [pc, #8]	; (8003198 <malloc+0xc>)
 800318e:	4601      	mov	r1, r0
 8003190:	6818      	ldr	r0, [r3, #0]
 8003192:	f000 b82b 	b.w	80031ec <_malloc_r>
 8003196:	bf00      	nop
 8003198:	20000014 	.word	0x20000014

0800319c <memset>:
 800319c:	4402      	add	r2, r0
 800319e:	4603      	mov	r3, r0
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d100      	bne.n	80031a6 <memset+0xa>
 80031a4:	4770      	bx	lr
 80031a6:	f803 1b01 	strb.w	r1, [r3], #1
 80031aa:	e7f9      	b.n	80031a0 <memset+0x4>

080031ac <sbrk_aligned>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4e0e      	ldr	r6, [pc, #56]	; (80031e8 <sbrk_aligned+0x3c>)
 80031b0:	460c      	mov	r4, r1
 80031b2:	6831      	ldr	r1, [r6, #0]
 80031b4:	4605      	mov	r5, r0
 80031b6:	b911      	cbnz	r1, 80031be <sbrk_aligned+0x12>
 80031b8:	f000 f88c 	bl	80032d4 <_sbrk_r>
 80031bc:	6030      	str	r0, [r6, #0]
 80031be:	4621      	mov	r1, r4
 80031c0:	4628      	mov	r0, r5
 80031c2:	f000 f887 	bl	80032d4 <_sbrk_r>
 80031c6:	1c43      	adds	r3, r0, #1
 80031c8:	d00a      	beq.n	80031e0 <sbrk_aligned+0x34>
 80031ca:	1cc4      	adds	r4, r0, #3
 80031cc:	f024 0403 	bic.w	r4, r4, #3
 80031d0:	42a0      	cmp	r0, r4
 80031d2:	d007      	beq.n	80031e4 <sbrk_aligned+0x38>
 80031d4:	1a21      	subs	r1, r4, r0
 80031d6:	4628      	mov	r0, r5
 80031d8:	f000 f87c 	bl	80032d4 <_sbrk_r>
 80031dc:	3001      	adds	r0, #1
 80031de:	d101      	bne.n	80031e4 <sbrk_aligned+0x38>
 80031e0:	f04f 34ff 	mov.w	r4, #4294967295
 80031e4:	4620      	mov	r0, r4
 80031e6:	bd70      	pop	{r4, r5, r6, pc}
 80031e8:	20000128 	.word	0x20000128

080031ec <_malloc_r>:
 80031ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f0:	1ccd      	adds	r5, r1, #3
 80031f2:	f025 0503 	bic.w	r5, r5, #3
 80031f6:	3508      	adds	r5, #8
 80031f8:	2d0c      	cmp	r5, #12
 80031fa:	bf38      	it	cc
 80031fc:	250c      	movcc	r5, #12
 80031fe:	2d00      	cmp	r5, #0
 8003200:	4607      	mov	r7, r0
 8003202:	db01      	blt.n	8003208 <_malloc_r+0x1c>
 8003204:	42a9      	cmp	r1, r5
 8003206:	d905      	bls.n	8003214 <_malloc_r+0x28>
 8003208:	230c      	movs	r3, #12
 800320a:	603b      	str	r3, [r7, #0]
 800320c:	2600      	movs	r6, #0
 800320e:	4630      	mov	r0, r6
 8003210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003214:	4e2e      	ldr	r6, [pc, #184]	; (80032d0 <_malloc_r+0xe4>)
 8003216:	f000 f8f9 	bl	800340c <__malloc_lock>
 800321a:	6833      	ldr	r3, [r6, #0]
 800321c:	461c      	mov	r4, r3
 800321e:	bb34      	cbnz	r4, 800326e <_malloc_r+0x82>
 8003220:	4629      	mov	r1, r5
 8003222:	4638      	mov	r0, r7
 8003224:	f7ff ffc2 	bl	80031ac <sbrk_aligned>
 8003228:	1c43      	adds	r3, r0, #1
 800322a:	4604      	mov	r4, r0
 800322c:	d14d      	bne.n	80032ca <_malloc_r+0xde>
 800322e:	6834      	ldr	r4, [r6, #0]
 8003230:	4626      	mov	r6, r4
 8003232:	2e00      	cmp	r6, #0
 8003234:	d140      	bne.n	80032b8 <_malloc_r+0xcc>
 8003236:	6823      	ldr	r3, [r4, #0]
 8003238:	4631      	mov	r1, r6
 800323a:	4638      	mov	r0, r7
 800323c:	eb04 0803 	add.w	r8, r4, r3
 8003240:	f000 f848 	bl	80032d4 <_sbrk_r>
 8003244:	4580      	cmp	r8, r0
 8003246:	d13a      	bne.n	80032be <_malloc_r+0xd2>
 8003248:	6821      	ldr	r1, [r4, #0]
 800324a:	3503      	adds	r5, #3
 800324c:	1a6d      	subs	r5, r5, r1
 800324e:	f025 0503 	bic.w	r5, r5, #3
 8003252:	3508      	adds	r5, #8
 8003254:	2d0c      	cmp	r5, #12
 8003256:	bf38      	it	cc
 8003258:	250c      	movcc	r5, #12
 800325a:	4629      	mov	r1, r5
 800325c:	4638      	mov	r0, r7
 800325e:	f7ff ffa5 	bl	80031ac <sbrk_aligned>
 8003262:	3001      	adds	r0, #1
 8003264:	d02b      	beq.n	80032be <_malloc_r+0xd2>
 8003266:	6823      	ldr	r3, [r4, #0]
 8003268:	442b      	add	r3, r5
 800326a:	6023      	str	r3, [r4, #0]
 800326c:	e00e      	b.n	800328c <_malloc_r+0xa0>
 800326e:	6822      	ldr	r2, [r4, #0]
 8003270:	1b52      	subs	r2, r2, r5
 8003272:	d41e      	bmi.n	80032b2 <_malloc_r+0xc6>
 8003274:	2a0b      	cmp	r2, #11
 8003276:	d916      	bls.n	80032a6 <_malloc_r+0xba>
 8003278:	1961      	adds	r1, r4, r5
 800327a:	42a3      	cmp	r3, r4
 800327c:	6025      	str	r5, [r4, #0]
 800327e:	bf18      	it	ne
 8003280:	6059      	strne	r1, [r3, #4]
 8003282:	6863      	ldr	r3, [r4, #4]
 8003284:	bf08      	it	eq
 8003286:	6031      	streq	r1, [r6, #0]
 8003288:	5162      	str	r2, [r4, r5]
 800328a:	604b      	str	r3, [r1, #4]
 800328c:	4638      	mov	r0, r7
 800328e:	f104 060b 	add.w	r6, r4, #11
 8003292:	f000 f8c1 	bl	8003418 <__malloc_unlock>
 8003296:	f026 0607 	bic.w	r6, r6, #7
 800329a:	1d23      	adds	r3, r4, #4
 800329c:	1af2      	subs	r2, r6, r3
 800329e:	d0b6      	beq.n	800320e <_malloc_r+0x22>
 80032a0:	1b9b      	subs	r3, r3, r6
 80032a2:	50a3      	str	r3, [r4, r2]
 80032a4:	e7b3      	b.n	800320e <_malloc_r+0x22>
 80032a6:	6862      	ldr	r2, [r4, #4]
 80032a8:	42a3      	cmp	r3, r4
 80032aa:	bf0c      	ite	eq
 80032ac:	6032      	streq	r2, [r6, #0]
 80032ae:	605a      	strne	r2, [r3, #4]
 80032b0:	e7ec      	b.n	800328c <_malloc_r+0xa0>
 80032b2:	4623      	mov	r3, r4
 80032b4:	6864      	ldr	r4, [r4, #4]
 80032b6:	e7b2      	b.n	800321e <_malloc_r+0x32>
 80032b8:	4634      	mov	r4, r6
 80032ba:	6876      	ldr	r6, [r6, #4]
 80032bc:	e7b9      	b.n	8003232 <_malloc_r+0x46>
 80032be:	230c      	movs	r3, #12
 80032c0:	603b      	str	r3, [r7, #0]
 80032c2:	4638      	mov	r0, r7
 80032c4:	f000 f8a8 	bl	8003418 <__malloc_unlock>
 80032c8:	e7a1      	b.n	800320e <_malloc_r+0x22>
 80032ca:	6025      	str	r5, [r4, #0]
 80032cc:	e7de      	b.n	800328c <_malloc_r+0xa0>
 80032ce:	bf00      	nop
 80032d0:	20000124 	.word	0x20000124

080032d4 <_sbrk_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	; (80032f0 <_sbrk_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd fdf2 	bl	8000ec8 <_sbrk>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_sbrk_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_sbrk_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	2000012c 	.word	0x2000012c

080032f4 <_strtol_l.constprop.0>:
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032fa:	d001      	beq.n	8003300 <_strtol_l.constprop.0+0xc>
 80032fc:	2b24      	cmp	r3, #36	; 0x24
 80032fe:	d906      	bls.n	800330e <_strtol_l.constprop.0+0x1a>
 8003300:	f7ff ff1a 	bl	8003138 <__errno>
 8003304:	2316      	movs	r3, #22
 8003306:	6003      	str	r3, [r0, #0]
 8003308:	2000      	movs	r0, #0
 800330a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800330e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80033f4 <_strtol_l.constprop.0+0x100>
 8003312:	460d      	mov	r5, r1
 8003314:	462e      	mov	r6, r5
 8003316:	f815 4b01 	ldrb.w	r4, [r5], #1
 800331a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800331e:	f017 0708 	ands.w	r7, r7, #8
 8003322:	d1f7      	bne.n	8003314 <_strtol_l.constprop.0+0x20>
 8003324:	2c2d      	cmp	r4, #45	; 0x2d
 8003326:	d132      	bne.n	800338e <_strtol_l.constprop.0+0x9a>
 8003328:	782c      	ldrb	r4, [r5, #0]
 800332a:	2701      	movs	r7, #1
 800332c:	1cb5      	adds	r5, r6, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05b      	beq.n	80033ea <_strtol_l.constprop.0+0xf6>
 8003332:	2b10      	cmp	r3, #16
 8003334:	d109      	bne.n	800334a <_strtol_l.constprop.0+0x56>
 8003336:	2c30      	cmp	r4, #48	; 0x30
 8003338:	d107      	bne.n	800334a <_strtol_l.constprop.0+0x56>
 800333a:	782c      	ldrb	r4, [r5, #0]
 800333c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003340:	2c58      	cmp	r4, #88	; 0x58
 8003342:	d14d      	bne.n	80033e0 <_strtol_l.constprop.0+0xec>
 8003344:	786c      	ldrb	r4, [r5, #1]
 8003346:	2310      	movs	r3, #16
 8003348:	3502      	adds	r5, #2
 800334a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800334e:	f108 38ff 	add.w	r8, r8, #4294967295
 8003352:	f04f 0c00 	mov.w	ip, #0
 8003356:	fbb8 f9f3 	udiv	r9, r8, r3
 800335a:	4666      	mov	r6, ip
 800335c:	fb03 8a19 	mls	sl, r3, r9, r8
 8003360:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003364:	f1be 0f09 	cmp.w	lr, #9
 8003368:	d816      	bhi.n	8003398 <_strtol_l.constprop.0+0xa4>
 800336a:	4674      	mov	r4, lr
 800336c:	42a3      	cmp	r3, r4
 800336e:	dd24      	ble.n	80033ba <_strtol_l.constprop.0+0xc6>
 8003370:	f1bc 0f00 	cmp.w	ip, #0
 8003374:	db1e      	blt.n	80033b4 <_strtol_l.constprop.0+0xc0>
 8003376:	45b1      	cmp	r9, r6
 8003378:	d31c      	bcc.n	80033b4 <_strtol_l.constprop.0+0xc0>
 800337a:	d101      	bne.n	8003380 <_strtol_l.constprop.0+0x8c>
 800337c:	45a2      	cmp	sl, r4
 800337e:	db19      	blt.n	80033b4 <_strtol_l.constprop.0+0xc0>
 8003380:	fb06 4603 	mla	r6, r6, r3, r4
 8003384:	f04f 0c01 	mov.w	ip, #1
 8003388:	f815 4b01 	ldrb.w	r4, [r5], #1
 800338c:	e7e8      	b.n	8003360 <_strtol_l.constprop.0+0x6c>
 800338e:	2c2b      	cmp	r4, #43	; 0x2b
 8003390:	bf04      	itt	eq
 8003392:	782c      	ldrbeq	r4, [r5, #0]
 8003394:	1cb5      	addeq	r5, r6, #2
 8003396:	e7ca      	b.n	800332e <_strtol_l.constprop.0+0x3a>
 8003398:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800339c:	f1be 0f19 	cmp.w	lr, #25
 80033a0:	d801      	bhi.n	80033a6 <_strtol_l.constprop.0+0xb2>
 80033a2:	3c37      	subs	r4, #55	; 0x37
 80033a4:	e7e2      	b.n	800336c <_strtol_l.constprop.0+0x78>
 80033a6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80033aa:	f1be 0f19 	cmp.w	lr, #25
 80033ae:	d804      	bhi.n	80033ba <_strtol_l.constprop.0+0xc6>
 80033b0:	3c57      	subs	r4, #87	; 0x57
 80033b2:	e7db      	b.n	800336c <_strtol_l.constprop.0+0x78>
 80033b4:	f04f 3cff 	mov.w	ip, #4294967295
 80033b8:	e7e6      	b.n	8003388 <_strtol_l.constprop.0+0x94>
 80033ba:	f1bc 0f00 	cmp.w	ip, #0
 80033be:	da05      	bge.n	80033cc <_strtol_l.constprop.0+0xd8>
 80033c0:	2322      	movs	r3, #34	; 0x22
 80033c2:	6003      	str	r3, [r0, #0]
 80033c4:	4646      	mov	r6, r8
 80033c6:	b942      	cbnz	r2, 80033da <_strtol_l.constprop.0+0xe6>
 80033c8:	4630      	mov	r0, r6
 80033ca:	e79e      	b.n	800330a <_strtol_l.constprop.0+0x16>
 80033cc:	b107      	cbz	r7, 80033d0 <_strtol_l.constprop.0+0xdc>
 80033ce:	4276      	negs	r6, r6
 80033d0:	2a00      	cmp	r2, #0
 80033d2:	d0f9      	beq.n	80033c8 <_strtol_l.constprop.0+0xd4>
 80033d4:	f1bc 0f00 	cmp.w	ip, #0
 80033d8:	d000      	beq.n	80033dc <_strtol_l.constprop.0+0xe8>
 80033da:	1e69      	subs	r1, r5, #1
 80033dc:	6011      	str	r1, [r2, #0]
 80033de:	e7f3      	b.n	80033c8 <_strtol_l.constprop.0+0xd4>
 80033e0:	2430      	movs	r4, #48	; 0x30
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1b1      	bne.n	800334a <_strtol_l.constprop.0+0x56>
 80033e6:	2308      	movs	r3, #8
 80033e8:	e7af      	b.n	800334a <_strtol_l.constprop.0+0x56>
 80033ea:	2c30      	cmp	r4, #48	; 0x30
 80033ec:	d0a5      	beq.n	800333a <_strtol_l.constprop.0+0x46>
 80033ee:	230a      	movs	r3, #10
 80033f0:	e7ab      	b.n	800334a <_strtol_l.constprop.0+0x56>
 80033f2:	bf00      	nop
 80033f4:	08003459 	.word	0x08003459

080033f8 <strtol>:
 80033f8:	4613      	mov	r3, r2
 80033fa:	460a      	mov	r2, r1
 80033fc:	4601      	mov	r1, r0
 80033fe:	4802      	ldr	r0, [pc, #8]	; (8003408 <strtol+0x10>)
 8003400:	6800      	ldr	r0, [r0, #0]
 8003402:	f7ff bf77 	b.w	80032f4 <_strtol_l.constprop.0>
 8003406:	bf00      	nop
 8003408:	20000014 	.word	0x20000014

0800340c <__malloc_lock>:
 800340c:	4801      	ldr	r0, [pc, #4]	; (8003414 <__malloc_lock+0x8>)
 800340e:	f000 b809 	b.w	8003424 <__retarget_lock_acquire_recursive>
 8003412:	bf00      	nop
 8003414:	20000130 	.word	0x20000130

08003418 <__malloc_unlock>:
 8003418:	4801      	ldr	r0, [pc, #4]	; (8003420 <__malloc_unlock+0x8>)
 800341a:	f000 b804 	b.w	8003426 <__retarget_lock_release_recursive>
 800341e:	bf00      	nop
 8003420:	20000130 	.word	0x20000130

08003424 <__retarget_lock_acquire_recursive>:
 8003424:	4770      	bx	lr

08003426 <__retarget_lock_release_recursive>:
 8003426:	4770      	bx	lr

08003428 <_init>:
 8003428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800342a:	bf00      	nop
 800342c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342e:	bc08      	pop	{r3}
 8003430:	469e      	mov	lr, r3
 8003432:	4770      	bx	lr

08003434 <_fini>:
 8003434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003436:	bf00      	nop
 8003438:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800343a:	bc08      	pop	{r3}
 800343c:	469e      	mov	lr, r3
 800343e:	4770      	bx	lr
